
cmake_minimum_required(VERSION 3.10)
project(RavlTest)

set(CMAKE_LEGACY_CYGWIN_WIN32 0)
set(CMAKE_CXX_STANDARD 17)

set(CMAKE_INSTALL_LIBDIR "/usr/local/lib")
set(CMAKE_INSTALL_INCLUDEDIR "/usr/local/include")

set(RAVLX_VERSION 0.1)


FIND_PACKAGE(Threads REQUIRED)
find_package(ZLIB QUIET)
find_package(CURL QUIET)
find_package(GTK2 QUIET)
find_package(LAPACK QUIET)

#find_package(OpenSceneGraph QUIET )
#

set(OpenGL_GL_PREFERENCE GLVND)
find_package(OpenGL)

include (FindPkgConfig)

pkg_check_modules(iksemel QUIET iksemel)
pkg_check_modules(libzmq QUIET libzmq)
pkg_check_modules(librlog QUIET librlog)
pkg_check_modules(OPENSCENEGRAPH QUIET osgDB osgFX osgGA osgParticle osgSim osgText osgUtil osgTerrain osgManipulator osgViewer osgWidget osgShadow osgAnimation osgVolume)
pkg_check_modules(opencv QUIET opencv)
pkg_check_modules(loudmouth QUIET loudmouth-1.0)
pkg_check_modules(uuid QUIET uuid)
pkg_check_modules(libpulse-simple QUIET libpulse-simple)
pkg_check_modules(python QUIET python)
pkg_check_modules(libdv QUIET libdv)
pkg_check_modules(libgnome QUIET libgnome-2.0)
pkg_check_modules(avifile QUIET avifile)
pkg_check_modules(portaudio QUIET portaudio-2.0)
pkg_check_modules(libdc1394 QUIET libdc1394-2)
pkg_check_modules(audiofile QUIET audiofile)
pkg_check_modules(libmpeg2 QUIET libmpeg2)
pkg_check_modules(dvdread QUIET dvdread)
pkg_check_modules(libglade QUIET libglade-2.0)

# The following packages need looking
pkg_check_modules(libgd QUIET libgd)
# libehs libGuppi LibJasper libmcrypt

find_package(MKL QUIET)

# This is used if a seperate library is required for tcp/ip sockets, largely legacy I suspect
set(SOCKET_FOUND 1)

$(silent:
$(mapreq:DynLink:DynLink:TRUE:::)
$(mapreq:posixThreads:posixThreads:Threads_FOUND:${CMAKE_THREAD_LIBS_INIT}::)
$(mapreq:Zlib:zlib:ZLIB_FOUND:${ZLIB_LIBRARIES}:${ZLIB_INCLUDE_DIRS}:${ZLIB_LIBRARY_DIRS})
$(mapreq:MacOSX::${CMAKE_SYSTEM_NAME} MATCHES "Darwin":::)
$(mapreq:libCurl:libcurl:CURL_FOUND:${CURL_LIBRARIES}:${CURL_INCLUDE_DIRS}:${CURL_LIBRARY_DIRS})
$(mapreq:libGTK2:GTK:GTK2_FOUND:${GTK2_LIBRARIES}:${GTK2_INCLUDE_DIRS}:${GTK2_LIBRARY_DIRS})
$(mapreq:gthread:Theads:Threads_FOUND:${CMAKE_THREAD_LIBS_INIT}::)
$(mapreq:LAPACK:LibLapack:LAPACK_FOUND:${LAPACK_LIBRARIES}:${LAPACK_INCLUDE_DIRS}:${LAPACK_LIBRARY_DIRS})
$(mapreq:ZeroMQ:Zmq:libzmq_FOUND:${libzmq_LIBRARIES}:${libzmq_INCLUDE_DIRS}:${libzmq_LIBRARY_DIRS})
$(mapreq:RLog:RLog:librlog_FOUND:${librlog_LIBRARIES}:${librlog_INCLUDE_DIRS}:${librlog_LIBRARY_DIRS})
$(mapreq:OpenSceneGraph:OpenSceneGraph.def:OPENSCENEGRAPH_FOUND:${OPENSCENEGRAPH_LIBRARIES}:${OPENSCENEGRAPH_INCLUDE_DIRS}:${OPENSCENEGRAPH_LIBRARY_DIRS})
$(mapreq:OpenCV:OpenCV:opencv_FOUND:${opencv_LIBRARIES}:${opencv_INCLUDE_DIRS}:${opencv_LIBRARY_DIRS})
$(mapreq:Loudmouth:loudmouth:loudmouth_FOUND:${loudmouth_LIBRARIES}:${loudmouth_INCLUDE_DIRS}:${loudmouth_LIBRARY_DIRS})
$(mapreq:iksemel:iksemel:iksemel_FOUND:${iksemel_LIBRARIES}:${iksemel_INCLUDE_DIRS}:${iksemel_LIBRARY_DIRS})
$(mapreq:UUIdTheo:uuid:uuid_FOUND:${uuid_LIBRARIES}:${uuid_INCLUDE_DIRS}:${uuid_LIBRARY_DIRS})
$(mapreq:uEyeSDK:uEyeSDK:uEyeSDK_FOUND:${uEyeSDK_LIBRARIES}:${uEyeSDK_INCLUDE_DIRS}:${uEyeSDK_LIBRARY_DIRS})
$(mapreq:libDV:LibDV:libdv_FOUND:${libdv_LIBRARIES}:${libdv_INCLUDE_DIRS}:${libdv_LIBRARY_DIRS})
$(mapreq:PulseAudioSimple:PulseAudioSimple:DEFINED libpulse-simple_FOUND:${libpulse-simple_LIBRARIES}:${libpulse-simple_INCLUDE_DIRS}:${libpulse-simple_LIBRARY_DIRS})
$(mapreq:LibPython:Python:python_FOUND:${python_LIBRARIES}:${python_INCLUDE_DIRS}:${python_LIBRARY_DIRS})
$(mapreq:LibGd:LibGd:libgd_FOUND:${libgd_LIBRARIES}:${libgd_INCLUDE_DIRS}:${libgd_LIBRARY_DIRS})
$(mapreq:libehs:LibEHS:libehs_FOUND:${libehs_LIBRARIES}:${libehs_INCLUDE_DIRS}:${libehs_LIBRARY_DIRS})
$(mapreq:LibGnome:LibGnome:libgnome_FOUND:${libgnome_LIBRARIES}:${libgnome_INCLUDE_DIRS}:${libgnome_LIBRARY_DIRS})
$(mapreq:LibJasper:LibJasper:libjasper_FOUND:${libjasper_LIBRARIES}:${libjasper_INCLUDE_DIRS}:${libjasper_LIBRARY_DIRS})
$(mapreq:avifile:AVIFile:avifile_FOUND:${avifile_LIBRARIES}:${avifile_INCLUDE_DIRS}:${avifile_LIBRARY_DIRS})
$(mapreq:libGuppi:LibGuppi:libguppi_FOUND:${libguppi_LIBRARIES}:${libguppi_INCLUDE_DIRS}:${libguppi_LIBRARY_DIRS})
$(mapreq:PortAudio:portAudio:portaudio_FOUND:${portaudio_LIBRARIES}:${portaudio_INCLUDE_DIRS}:${portaudio_LIBRARY_DIRS})
$(mapreq:libdc1394:Lib1394dc:libdc1394_FOUND:${libdc1394_LIBRARIES}:${libdc1394_INCLUDE_DIRS}:${libdc1394_LIBRARY_DIRS})
$(mapreq:libAudioFile:AudioFile:audiofile_FOUND:${audiofile_LIBRARIES}:${audiofile_INCLUDE_DIRS}:${audiofile_LIBRARY_DIRS})
$(mapreq:libmpeg2:LibMPEG2:libmpeg2_FOUND:${libmpeg2_LIBRARIES}:${libmpeg2_INCLUDE_DIRS}:${libmpeg2_LIBRARY_DIRS})
$(mapreq:devVideo4Linux2::${CMAKE_SYSTEM_NAME} STREQUAL "Linux":::)
$(mapreq:devVideo4Linux::${CMAKE_SYSTEM_NAME} STREQUAL "Linux":::)
$(mapreq:SGIVL::SGI:::)
$(mapreq:dvdread:DVDRead:dvdread_FOUND:${dvdread_LIBRARIES}:${dvdread_INCLUDE_DIRS}:${dvdread_LIBRARY_DIRS})
$(mapreq:libClipStationPro:ClipStationPro:DEFINED libClipStationPro_FOUND:${libClipStationPro_LIBRARIES}:${libClipStationPro_INCLUDE_DIRS}:${libClipStationPro_LIBRARY_DIRS})
$(mapreq:libmcrypt:LibMCrypt:libmcrypt_FOUND:${libmcrypt_LIBRARIES}:${libmcrypt_INCLUDE_DIRS}:${libmcrypt_LIBRARY_DIRS})
$(mapreq:libGL:OpenGL:OPENGL_FOUND:${OPENGL_LIBRARIES}:${OPENGL_INCLUDE_DIR}:)
$(mapreq:Socket:Socket:SOCKET_FOUND:${SOCKET_LIBRARIES}::)
$(mapreq:libglade2:libglade:libglade_FOUND:${libglade_LIBRARIES}:${libglade_INCLUDE_DIRS}:${libglade_LIBRARY_DIRS})
$(mapreq:libmkl:IntelMKL:MKL_FOUND:${MKL_LIBRARIES}:${MKL_INCLUDE_DIRS}:${MKL_LIBRARY_DIRS})
)
$(forall:extlibs:if($(found))
message(STATUS "$(lib) found LIBS:$(link)")
$(ifset:header_path:if(NOT "$(header_path)" STREQUAL "")
message(STATUS " Include : $(header_path)")
include_directories($(header_path))
endif()
)$(ifset:library_path:if(NOT "$(library_path)" STREQUAL "")
message(STATUS " Library : $(library_path)")
link_directories($(library_path))
endif()
)else()
message(STATUS "$(lib) not found")
endif()

)

enable_testing()

$(forall:toplevel:add_subdirectory(src/$(lib))
)

install(DIRECTORY include DESTINATION include)
