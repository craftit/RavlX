
cmake_minimum_required(VERSION 3.10)
project(RavlTest)

set(CMAKE_LEGACY_CYGWIN_WIN32 0)
set(CMAKE_CXX_STANDARD 17)

set(CMAKE_INSTALL_LIBDIR "/usr/local/lib")
set(CMAKE_INSTALL_INCLUDEDIR "/usr/local/include")

set(RAVLX_VERSION 0.1)


FIND_PACKAGE(Threads REQUIRED)
find_package(ZLIB QUIET)
find_package(CURL QUIET)
find_package(GTK2 QUIET)
find_package(LAPACK QUIET)

set(OpenGL_GL_PREFERENCE GLVND)
find_package(OpenGL)

include (FindPkgConfig)

pkg_check_modules(iksemel QUIET)
pkg_check_modules(libzmq QUIET)
pkg_check_modules(librlog QUIET)
pkg_check_modules(openscenegraph QUIET)
pkg_check_modules(opencv QUIET)
pkg_check_modules(loudmouth QUIET)
pkg_check_modules(uuid QUIET)
pkg_check_modules(libpulse-simple QUIET)
pkg_check_modules(python QUIET)
pkg_check_modules(libgd QUIET)
pkg_check_modules(libgnome QUIET)
pkg_check_modules(avifile QUIET)
pkg_check_modules(portaudio QUIET)
pkg_check_modules(libdc1394 QUIET)
pkg_check_modules(audiofile QUIET)
pkg_check_modules(libmpeg2 QUIET)
pkg_check_modules(dvdread QUIET)

$(silent:
$(mapreq:Zlib:zlib:DEFINED ZLIB_FOUND:${ZLIB_LIBRARIES}:${ZLIB_INCLUDE_DIRS}:${ZLIB_LIBRARY_DIRS})
$(mapreq:MacOSX::${CMAKE_SYSTEM_NAME} MATCHES "Darwin":::)
$(mapreq:libCurl:libcurl:DEFINED CURL_FOUND:${CURL_LIBRARIES}:${CURL_INCLUDE_DIRS}:${CURL_LIBRARY_DIRS})
$(mapreq:libGTK2:GTK:DEFINED GTK2_FOUND:${GTK2_LIBRARIES}:${GTK2_INCLUDE_DIRS}:${GTK2_LIBRARY_DIRS})
$(mapreq:gthread:Theads:DEFINED Threads_FOUND:${CMAKE_THREAD_LIBS_INIT}::)
$(mapreq:LAPACK:LibLapack:DEFINED LAPACK_FOUND:${LAPACK_LIBRARIES}:${LAPACK_INCLUDE_DIRS}:${LAPACK_LIBRARY_DIRS})
$(mapreq:ZeroMQ:Zmq:DEFINED libzmq_FOUND:${libzmq_LIBRARIES}:${libzmq_INCLUDE_DIRS}:${libzmq_LIBRARY_DIRS})
$(mapreq:RLog:RLog:DEFINED librlog_FOUND:${librlog_LIBRARIES}:${librlog_INCLUDE_DIRS}:${librlog_LIBRARY_DIRS})
$(mapreq:OpenSceneGraph:OpenSceneGraph.def:DEFINED openscenegraph_FOUND:${openscenegraph_LIBRARIES}:${openscenegraph_INCLUDE_DIRS}:${openscenegraph_LIBRARY_DIRS})
$(mapreq:OpenCV:OpenCV:DEFINED opencv_FOUND:${opencv_LIBRARIES}:${opencv_INCLUDE_DIRS}:${opencv_LIBRARY_DIRS})
$(mapreq:Loudmouth:loudmouth:DEFINED loudmouth_FOUND:${loudmouth_LIBRARIES}:${loudmouth_INCLUDE_DIRS}:${loudmouth_LIBRARY_DIRS})
$(mapreq:iksemel:iksemel:DEFINED iksemel_FOUND:${iksemel_LIBRARIES}:${iksemel_INCLUDE_DIRS}:${iksemel_LIBRARY_DIRS})
$(mapreq:UUIdTheo:uuid:DEFINED uuid_FOUND:${uuid_LIBRARIES}:${uuid_INCLUDE_DIRS}:${uuid_LIBRARY_DIRS})
$(mapreq:uEyeSDK:uEyeSDK:DEFINED uEyeSDK_FOUND:${uEyeSDK_LIBRARIES}:${uEyeSDK_INCLUDE_DIRS}:${uEyeSDK_LIBRARY_DIRS})
$(mapreq:libDV:LibDV:DEFINED libdv_FOUND:${libdv_LIBRARIES}:${libdv_INCLUDE_DIRS}:${libdv_LIBRARY_DIRS})
$(mapreq:PulseAudioSimple:PulseAudioSimple:DEFINED pulse-simple_FOUND:${pulse-simple_LIBRARIES}:${pulse-simple_INCLUDE_DIRS}:${pulse-simple_LIBRARY_DIRS})
$(mapreq:LibPython:Python:DEFINED python_FOUND:${python_LIBRARIES}:${python_INCLUDE_DIRS}:${python_LIBRARY_DIRS})
$(mapreq:LibGd:LibGd:DEFINED libgd_FOUND:${libgd_LIBRARIES}:${libgd_INCLUDE_DIRS}:${libgd_LIBRARY_DIRS})
$(mapreq:libehs:LibEHS:DEFINED libehs_FOUND:${libehs_LIBRARIES}:${libehs_INCLUDE_DIRS}:${libehs_LIBRARY_DIRS})
$(mapreq:LibGnome:LibGnome:DEFINED libgnome_FOUND:${libgnome_LIBRARIES}:${libgnome_INCLUDE_DIRS}:${libgnome_LIBRARY_DIRS})
$(mapreq:LibJasper:LibJasper:DEFINED libjasper_FOUND:${libjasper_LIBRARIES}:${libjasper_INCLUDE_DIRS}:${libjasper_LIBRARY_DIRS})
$(mapreq:avifile:AVIFile:DEFINED avifile_FOUND:${avifile_LIBRARIES}:${avifile_INCLUDE_DIRS}:${avifile_LIBRARY_DIRS})
$(mapreq:libGuppi:LibGuppi:DEFINED libguppi_FOUND:${libguppi_LIBRARIES}:${libguppi_INCLUDE_DIRS}:${libguppi_LIBRARY_DIRS})
$(mapreq:PortAudio:portAudio:DEFINED portaudio_FOUND:${portaudio_LIBRARIES}:${portaudio_INCLUDE_DIRS}:${portaudio_LIBRARY_DIRS})
$(mapreq:libdc1394:Lib1394dc:DEFINED libdc1394_FOUND:${libdc1394_LIBRARIES}:${libdc1394_INCLUDE_DIRS}:${libdc1394_LIBRARY_DIRS})
$(mapreq:libAudioFile:AudioFile:DEFINED audiofile_FOUND:${audiofile_LIBRARIES}:${audiofile_INCLUDE_DIRS}:${audiofile_LIBRARY_DIRS})
$(mapreq:libmpeg2:LibMPEG2:DEFINED libmpeg2_FOUND:${libmpeg2_LIBRARIES}:${libmpeg2_INCLUDE_DIRS}:${libmpeg2_LIBRARY_DIRS})
$(mapreq:devVideo4Linux2::LINUX:::)
$(mapreq:devVideo4Linux::LINUX:::)
$(mapreq:SGIVL::SGI:::)
$(mapreq:dvdread:DVDRead:DEFINED dvdread_FOUND:${dvdread_LIBRARIES}:${dvdread_INCLUDE_DIRS}:${dvdread_LIBRARY_DIRS})
$(mapreq:libClipStationPro:ClipStationPro:DEFINED libClipStationPro_FOUND:${libClipStationPro_LIBRARIES}:${libClipStationPro_INCLUDE_DIRS}:${libClipStationPro_LIBRARY_DIRS})
$(mapreq:libmcrypt:LibMCrypt:DEFINED libmcrypt_FOUND:${libmcrypt_LIBRARIES}:${libmcrypt_INCLUDE_DIRS}:${libmcrypt_LIBRARY_DIRS})
$(mapreq:libGL:OpenGL:DEFINED OPENGL_FOUND:${OPENGL_LIBRARIES}:${OPENGL_INCLUDE_DIR}:)
$(mapreq:Socket:Socket:DEFINED SOCKET_FOUND:${SOCKET_LIBRARIES}:${SOCKET_INCLUDE_DIR}:)
)
$(forall:extlibs:if($(found))
message(STATUS "$(lib) found")
$(ifset:header_path:if(NOT "$(header_path)" STREQUAL "")
message(STATUS " Include : $(header_path)")
include_directories($(header_path))
endif()
)$(ifset:library_path:if(NOT "$(library_path)" STREQUAL "")
message(STATUS " Library : $(library_path)")
link_directories($(library_path))
endif()
)else()
message(STATUS "$(lib) not found")
endif()

)

enable_testing()

$(forall:toplevel:add_subdirectory(src/$(lib))
)

install(DIRECTORY include DESTINATION include)
