# Template makefile
# Author: K. Messer
# Date:   27 February 2002

# Common stuff to all Ravl makefiles
CXX = g++
CC = gcc
CPPFLAGS = -Wall -pipe -O -DAMMA_CHECK -DGNU -D__linux__ -Dunix -DPROJECT_OUT="/buf/soft" -DCPUG_ARCH="$(platform)"
LDFLAGS = -L$(libdir)
INCLUDES = -I$(incdir)
DEFINES =  -DAMMA_CHECK -ansi -DGNU -D__linux__ -Dunix -DPROJECT_OUT="/buf/soft" -DCPUG_ARCH="linux"
COMPILE = $$(INCLUDES) $$(DEFINES) $$(CPPFLAGS) $$(CFLAGS)
.SUFFIXES: .cc .c .o .a
LOCALLIB = 
ARC = $(platform)

.cc.o: $$(OBJECTS)
	$$(CXX) $$(COMPILE) -c $< 

.c.o: $$(OBJECTS)
	$$(CC) $$(COMPILE) -c $< 


# End common stuff

# Do we have to do any recursive directories
$(ifset:nested:SUBDIRS = $(nested))

$(ifset:libs:
$(for:' ':$libs:
include %arg%.def)
)

#  Set up the headers
$(ifset:headers:
headers: $(for:' ':$headers:	
	cp %arg% $(incdir)/$(package)) 
)

#  Set up the sources and library if defined
$(ifset:sources:
$(set:objects=$(subst:.cc:.o:$(sources)))
OBJECTS = $(objects)
$(ifset:libname:
LOCALLIB = -l$(libname)
LINK = ar ruc $(libdir)/lib$(libname).a
$(libname): $$(OBJECTS)
	 $$(LINK) $$(OBJECTS))
$(else:
LOCALLIB = $(objects)
))


# Set up the must links
$(ifset:mustlink:
$(set:mlinks=$(for:' ':$mustlink:$(libdir)/$(subst:.cc:.o:$(mustlink))))
mustlink: $(subst:.cc:.o:$(mustlink))
	cp $(subst:.cc:.o:$(mustlink)) $(libdir)
)


# Set up the examples
$(ifset:examples:
$(for:' ':$examples:
$(subst:.cc::%arg%): $$(OBJECTS) $(subst:.cc:.o:%arg%)
	$$(CXX) $(ifset:mustlink:$(mlinks)) $(subst:.cc:.o:%arg%) $$(LDFLAGS) $$(LOCALLIB) $$(EXELIB) -o $(bindir)/$(subst:.cc::%arg%))
)

# Set up the mains
$(ifset:mains:
$(for:' ':$mains:
$(subst:.cc::%arg%): $$(OBJECTS) $(subst:.cc:.o:%arg%)
	$$(CXX)  $(ifset:mustlink:$(mlinks)) $(subst:.cc:.o:%arg%) $$(LDFLAGS) $$(LOCALLIB) $$(EXELIB) -o $(bindir)/$(subst:.cc::%arg%))
)

# Set up the test exes
$(ifset:testexes:
$(for:' ':$testexes:
$(subst:.cc::%arg%): $$(OBJECTS) $(subst:.cc:.o:%arg%)
	$$(CXX)  $(ifset:mustlink:$(mlinks)) $(subst:.cc:.o:%arg%) $$(LDFLAGS) $$(LOCALLIB) $$(EXELIB) -o $(bindir)/$(subst:.cc::%arg%))
)


# Now lets make a list of all the targets
$(ifset:sources:
lib: $(ifset:mustlink:mustlink) $(libname)
)

$(ifset:examples:
examples: $(subst:.cc::$(examples))
)

$(ifset:mains:
mains: $(subst:.cc::$(mains))
)

$(ifset:testexes:
testexes: $(subst:.cc::$(testexes))
)

dir:
	$(ifset:headers:mkdir -p $(incdir)/$(package)) $(ifset:sources:mkdir -p $(libdir)) $(ifset:mustlink:mkdir -p $(libdir)) $(ifset:examples:mkdir -p $(bindir)) $(ifset:mains:mkdir -p $(bindir)) $(ifset:testexes:mkdir -p $(bindir))

all:  $(ifset:headers:headers) $(ifset:sources:$(libname)) $(ifset:mustlink:mustlink) $(ifset:examples:examples) $(ifset:mains:mains) $(ifset:testexes:testexes)
$(ifset:nested:	list='$$(SUBDIRS)'; for subdir in $$list; do \
        echo "Making: $$subdir"; \
	(cd $$subdir && make all) \
	done;
$(for:' ':headers lib examples mains testexes clean:
%arg%: 
	list='$$(SUBDIRS)'; for subdir in $$list; do \
        echo "Making: $$subdir"; \
	(cd $$subdir && make %arg%) \
	done;
))
$(else:
clean:
	rm *.o
)



