# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

"""
Recognition and Vision Library
RAVL provides a base C++ class library together with a range of
computer vision, pattern recognition and supporting tools.
"""

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Ravl', [dirname(__file__)])
        except ImportError:
            import _Ravl
            return _Ravl
        if fp is not None:
            try:
                _mod = imp.load_module('_Ravl', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Ravl = swig_import_helper()
    del swig_import_helper
else:
    import _Ravl
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class DListRealC(_object):
    """Proxy of C++ RavlN::DListC<(RavlN::RealT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListRealC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListRealC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> DListRealC"""
        this = _Ravl.new_DListRealC()
        try: self.this.append(this)
        except: self.this = this
    def Empty(self):
        """Empty(self)"""
        return _Ravl.DListRealC_Empty(self)

    def InsFirst(self, *args):
        """InsFirst(self, dat)"""
        return _Ravl.DListRealC_InsFirst(self, *args)

    def InsLast(self, *args):
        """InsLast(self, dat)"""
        return _Ravl.DListRealC_InsLast(self, *args)

    def PopFirst(self):
        """PopFirst(self) -> double"""
        return _Ravl.DListRealC_PopFirst(self)

    def PopLast(self):
        """PopLast(self) -> double"""
        return _Ravl.DListRealC_PopLast(self)

    def MoveFirst(self, *args):
        """MoveFirst(self, lst)"""
        return _Ravl.DListRealC_MoveFirst(self, *args)

    def MoveLast(self, *args):
        """MoveLast(self, lst)"""
        return _Ravl.DListRealC_MoveLast(self, *args)

    def First(self):
        """First(self) -> double"""
        return _Ravl.DListRealC_First(self)

    def Last(self):
        """Last(self) -> double"""
        return _Ravl.DListRealC_Last(self)

    def Del(self, *args):
        """Del(self, x) -> bool"""
        return _Ravl.DListRealC_Del(self, *args)

    def Contains(self, *args):
        """Contains(self, x) -> bool"""
        return _Ravl.DListRealC_Contains(self, *args)

    def Nth(self, *args):
        """Nth(self, n) -> double"""
        return _Ravl.DListRealC_Nth(self, *args)

    __swig_destroy__ = _Ravl.delete_DListRealC
    __del__ = lambda self : None;
DListRealC_swigregister = _Ravl.DListRealC_swigregister
DListRealC_swigregister(DListRealC)

class DListRealIterC(_object):
    """Proxy of C++ RavlN::DLIterC<(RavlN::RealT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListRealIterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListRealIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListRealIterC
        __init__(self, lst) -> DListRealIterC
        """
        this = _Ravl.new_DListRealIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self):
        """IsValid(self) -> bool"""
        return _Ravl.DListRealIterC_IsValid(self)

    def First(self):
        """First(self)"""
        return _Ravl.DListRealIterC_First(self)

    def Last(self):
        """Last(self)"""
        return _Ravl.DListRealIterC_Last(self)

    def IsElm(self):
        """IsElm(self) -> bool"""
        return _Ravl.DListRealIterC_IsElm(self)

    def IsFirst(self):
        """IsFirst(self) -> bool"""
        return _Ravl.DListRealIterC_IsFirst(self)

    def IsLast(self):
        """IsLast(self) -> bool"""
        return _Ravl.DListRealIterC_IsLast(self)

    def Next(self):
        """Next(self)"""
        return _Ravl.DListRealIterC_Next(self)

    def Prev(self):
        """Prev(self)"""
        return _Ravl.DListRealIterC_Prev(self)

    def NextCrc(self):
        """NextCrc(self)"""
        return _Ravl.DListRealIterC_NextCrc(self)

    def PrevCrc(self):
        """PrevCrc(self)"""
        return _Ravl.DListRealIterC_PrevCrc(self)

    def Nth(self, *args):
        """Nth(self, n)"""
        return _Ravl.DListRealIterC_Nth(self, *args)

    def NextData(self):
        """NextData(self) -> double"""
        return _Ravl.DListRealIterC_NextData(self)

    def PrevData(self):
        """PrevData(self) -> double"""
        return _Ravl.DListRealIterC_PrevData(self)

    def NextCrcData(self):
        """NextCrcData(self) -> double"""
        return _Ravl.DListRealIterC_NextCrcData(self)

    def PrevCrcData(self):
        """PrevCrcData(self) -> double"""
        return _Ravl.DListRealIterC_PrevCrcData(self)

    def Tail(self):
        """Tail(self) -> DListRealC"""
        return _Ravl.DListRealIterC_Tail(self)

    def Head(self):
        """Head(self) -> DListRealC"""
        return _Ravl.DListRealIterC_Head(self)

    def InclusiveTail(self):
        """InclusiveTail(self) -> DListRealC"""
        return _Ravl.DListRealIterC_InclusiveTail(self)

    def InclusiveHead(self):
        """InclusiveHead(self) -> DListRealC"""
        return _Ravl.DListRealIterC_InclusiveHead(self)

    def Data(self):
        """Data(self) -> double"""
        return _Ravl.DListRealIterC_Data(self)

    def __deref__(self):
        """__deref__(self) -> double"""
        return _Ravl.DListRealIterC___deref__(self)

    __swig_destroy__ = _Ravl.delete_DListRealIterC
    __del__ = lambda self : None;
DListRealIterC_swigregister = _Ravl.DListRealIterC_swigregister
DListRealIterC_swigregister(DListRealIterC)

class DListRealConstIterC(DListRealIterC):
    """Proxy of C++ RavlN::ConstDLIterC<(RavlN::RealT)> class"""
    __swig_setmethods__ = {}
    for _s in [DListRealIterC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListRealConstIterC, name, value)
    __swig_getmethods__ = {}
    for _s in [DListRealIterC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DListRealConstIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListRealConstIterC
        __init__(self, copy) -> DListRealConstIterC
        """
        this = _Ravl.new_DListRealConstIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DListRealConstIterC
    __del__ = lambda self : None;
DListRealConstIterC_swigregister = _Ravl.DListRealConstIterC_swigregister
DListRealConstIterC_swigregister(DListRealConstIterC)

class DListIntC(_object):
    """Proxy of C++ RavlN::DListC<(RavlN::IntT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListIntC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListIntC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> DListIntC"""
        this = _Ravl.new_DListIntC()
        try: self.this.append(this)
        except: self.this = this
    def Empty(self):
        """Empty(self)"""
        return _Ravl.DListIntC_Empty(self)

    def InsFirst(self, *args):
        """InsFirst(self, dat)"""
        return _Ravl.DListIntC_InsFirst(self, *args)

    def InsLast(self, *args):
        """InsLast(self, dat)"""
        return _Ravl.DListIntC_InsLast(self, *args)

    def PopFirst(self):
        """PopFirst(self) -> int"""
        return _Ravl.DListIntC_PopFirst(self)

    def PopLast(self):
        """PopLast(self) -> int"""
        return _Ravl.DListIntC_PopLast(self)

    def MoveFirst(self, *args):
        """MoveFirst(self, lst)"""
        return _Ravl.DListIntC_MoveFirst(self, *args)

    def MoveLast(self, *args):
        """MoveLast(self, lst)"""
        return _Ravl.DListIntC_MoveLast(self, *args)

    def First(self):
        """First(self) -> int"""
        return _Ravl.DListIntC_First(self)

    def Last(self):
        """Last(self) -> int"""
        return _Ravl.DListIntC_Last(self)

    def Del(self, *args):
        """Del(self, x) -> bool"""
        return _Ravl.DListIntC_Del(self, *args)

    def Contains(self, *args):
        """Contains(self, x) -> bool"""
        return _Ravl.DListIntC_Contains(self, *args)

    def Nth(self, *args):
        """Nth(self, n) -> int"""
        return _Ravl.DListIntC_Nth(self, *args)

    __swig_destroy__ = _Ravl.delete_DListIntC
    __del__ = lambda self : None;
DListIntC_swigregister = _Ravl.DListIntC_swigregister
DListIntC_swigregister(DListIntC)

class DListIntIterC(_object):
    """Proxy of C++ RavlN::DLIterC<(RavlN::IntT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListIntIterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListIntIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListIntIterC
        __init__(self, lst) -> DListIntIterC
        """
        this = _Ravl.new_DListIntIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self):
        """IsValid(self) -> bool"""
        return _Ravl.DListIntIterC_IsValid(self)

    def First(self):
        """First(self)"""
        return _Ravl.DListIntIterC_First(self)

    def Last(self):
        """Last(self)"""
        return _Ravl.DListIntIterC_Last(self)

    def IsElm(self):
        """IsElm(self) -> bool"""
        return _Ravl.DListIntIterC_IsElm(self)

    def IsFirst(self):
        """IsFirst(self) -> bool"""
        return _Ravl.DListIntIterC_IsFirst(self)

    def IsLast(self):
        """IsLast(self) -> bool"""
        return _Ravl.DListIntIterC_IsLast(self)

    def Next(self):
        """Next(self)"""
        return _Ravl.DListIntIterC_Next(self)

    def Prev(self):
        """Prev(self)"""
        return _Ravl.DListIntIterC_Prev(self)

    def NextCrc(self):
        """NextCrc(self)"""
        return _Ravl.DListIntIterC_NextCrc(self)

    def PrevCrc(self):
        """PrevCrc(self)"""
        return _Ravl.DListIntIterC_PrevCrc(self)

    def Nth(self, *args):
        """Nth(self, n)"""
        return _Ravl.DListIntIterC_Nth(self, *args)

    def NextData(self):
        """NextData(self) -> int"""
        return _Ravl.DListIntIterC_NextData(self)

    def PrevData(self):
        """PrevData(self) -> int"""
        return _Ravl.DListIntIterC_PrevData(self)

    def NextCrcData(self):
        """NextCrcData(self) -> int"""
        return _Ravl.DListIntIterC_NextCrcData(self)

    def PrevCrcData(self):
        """PrevCrcData(self) -> int"""
        return _Ravl.DListIntIterC_PrevCrcData(self)

    def Tail(self):
        """Tail(self) -> DListIntC"""
        return _Ravl.DListIntIterC_Tail(self)

    def Head(self):
        """Head(self) -> DListIntC"""
        return _Ravl.DListIntIterC_Head(self)

    def InclusiveTail(self):
        """InclusiveTail(self) -> DListIntC"""
        return _Ravl.DListIntIterC_InclusiveTail(self)

    def InclusiveHead(self):
        """InclusiveHead(self) -> DListIntC"""
        return _Ravl.DListIntIterC_InclusiveHead(self)

    def Data(self):
        """Data(self) -> int"""
        return _Ravl.DListIntIterC_Data(self)

    def __deref__(self):
        """__deref__(self) -> int"""
        return _Ravl.DListIntIterC___deref__(self)

    __swig_destroy__ = _Ravl.delete_DListIntIterC
    __del__ = lambda self : None;
DListIntIterC_swigregister = _Ravl.DListIntIterC_swigregister
DListIntIterC_swigregister(DListIntIterC)

class DListIntConstIterC(DListIntIterC):
    """Proxy of C++ RavlN::ConstDLIterC<(RavlN::IntT)> class"""
    __swig_setmethods__ = {}
    for _s in [DListIntIterC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListIntConstIterC, name, value)
    __swig_getmethods__ = {}
    for _s in [DListIntIterC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DListIntConstIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListIntConstIterC
        __init__(self, copy) -> DListIntConstIterC
        """
        this = _Ravl.new_DListIntConstIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DListIntConstIterC
    __del__ = lambda self : None;
DListIntConstIterC_swigregister = _Ravl.DListIntConstIterC_swigregister
DListIntConstIterC_swigregister(DListIntConstIterC)

class DListUIntC(_object):
    """Proxy of C++ RavlN::DListC<(RavlN::UIntT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListUIntC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListUIntC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> DListUIntC"""
        this = _Ravl.new_DListUIntC()
        try: self.this.append(this)
        except: self.this = this
    def Empty(self):
        """Empty(self)"""
        return _Ravl.DListUIntC_Empty(self)

    def InsFirst(self, *args):
        """InsFirst(self, dat)"""
        return _Ravl.DListUIntC_InsFirst(self, *args)

    def InsLast(self, *args):
        """InsLast(self, dat)"""
        return _Ravl.DListUIntC_InsLast(self, *args)

    def PopFirst(self):
        """PopFirst(self) -> unsigned int"""
        return _Ravl.DListUIntC_PopFirst(self)

    def PopLast(self):
        """PopLast(self) -> unsigned int"""
        return _Ravl.DListUIntC_PopLast(self)

    def MoveFirst(self, *args):
        """MoveFirst(self, lst)"""
        return _Ravl.DListUIntC_MoveFirst(self, *args)

    def MoveLast(self, *args):
        """MoveLast(self, lst)"""
        return _Ravl.DListUIntC_MoveLast(self, *args)

    def First(self):
        """First(self) -> unsigned int"""
        return _Ravl.DListUIntC_First(self)

    def Last(self):
        """Last(self) -> unsigned int"""
        return _Ravl.DListUIntC_Last(self)

    def Del(self, *args):
        """Del(self, x) -> bool"""
        return _Ravl.DListUIntC_Del(self, *args)

    def Contains(self, *args):
        """Contains(self, x) -> bool"""
        return _Ravl.DListUIntC_Contains(self, *args)

    def Nth(self, *args):
        """Nth(self, n) -> unsigned int"""
        return _Ravl.DListUIntC_Nth(self, *args)

    __swig_destroy__ = _Ravl.delete_DListUIntC
    __del__ = lambda self : None;
DListUIntC_swigregister = _Ravl.DListUIntC_swigregister
DListUIntC_swigregister(DListUIntC)

class DListUIntIterC(_object):
    """Proxy of C++ RavlN::DLIterC<(RavlN::UIntT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListUIntIterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListUIntIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListUIntIterC
        __init__(self, lst) -> DListUIntIterC
        """
        this = _Ravl.new_DListUIntIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self):
        """IsValid(self) -> bool"""
        return _Ravl.DListUIntIterC_IsValid(self)

    def First(self):
        """First(self)"""
        return _Ravl.DListUIntIterC_First(self)

    def Last(self):
        """Last(self)"""
        return _Ravl.DListUIntIterC_Last(self)

    def IsElm(self):
        """IsElm(self) -> bool"""
        return _Ravl.DListUIntIterC_IsElm(self)

    def IsFirst(self):
        """IsFirst(self) -> bool"""
        return _Ravl.DListUIntIterC_IsFirst(self)

    def IsLast(self):
        """IsLast(self) -> bool"""
        return _Ravl.DListUIntIterC_IsLast(self)

    def Next(self):
        """Next(self)"""
        return _Ravl.DListUIntIterC_Next(self)

    def Prev(self):
        """Prev(self)"""
        return _Ravl.DListUIntIterC_Prev(self)

    def NextCrc(self):
        """NextCrc(self)"""
        return _Ravl.DListUIntIterC_NextCrc(self)

    def PrevCrc(self):
        """PrevCrc(self)"""
        return _Ravl.DListUIntIterC_PrevCrc(self)

    def Nth(self, *args):
        """Nth(self, n)"""
        return _Ravl.DListUIntIterC_Nth(self, *args)

    def NextData(self):
        """NextData(self) -> unsigned int"""
        return _Ravl.DListUIntIterC_NextData(self)

    def PrevData(self):
        """PrevData(self) -> unsigned int"""
        return _Ravl.DListUIntIterC_PrevData(self)

    def NextCrcData(self):
        """NextCrcData(self) -> unsigned int"""
        return _Ravl.DListUIntIterC_NextCrcData(self)

    def PrevCrcData(self):
        """PrevCrcData(self) -> unsigned int"""
        return _Ravl.DListUIntIterC_PrevCrcData(self)

    def Tail(self):
        """Tail(self) -> DListUIntC"""
        return _Ravl.DListUIntIterC_Tail(self)

    def Head(self):
        """Head(self) -> DListUIntC"""
        return _Ravl.DListUIntIterC_Head(self)

    def InclusiveTail(self):
        """InclusiveTail(self) -> DListUIntC"""
        return _Ravl.DListUIntIterC_InclusiveTail(self)

    def InclusiveHead(self):
        """InclusiveHead(self) -> DListUIntC"""
        return _Ravl.DListUIntIterC_InclusiveHead(self)

    def Data(self):
        """Data(self) -> unsigned int"""
        return _Ravl.DListUIntIterC_Data(self)

    def __deref__(self):
        """__deref__(self) -> unsigned int"""
        return _Ravl.DListUIntIterC___deref__(self)

    __swig_destroy__ = _Ravl.delete_DListUIntIterC
    __del__ = lambda self : None;
DListUIntIterC_swigregister = _Ravl.DListUIntIterC_swigregister
DListUIntIterC_swigregister(DListUIntIterC)

class DListUIntConstIterC(DListUIntIterC):
    """Proxy of C++ RavlN::ConstDLIterC<(RavlN::UIntT)> class"""
    __swig_setmethods__ = {}
    for _s in [DListUIntIterC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListUIntConstIterC, name, value)
    __swig_getmethods__ = {}
    for _s in [DListUIntIterC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DListUIntConstIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListUIntConstIterC
        __init__(self, copy) -> DListUIntConstIterC
        """
        this = _Ravl.new_DListUIntConstIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DListUIntConstIterC
    __del__ = lambda self : None;
DListUIntConstIterC_swigregister = _Ravl.DListUIntConstIterC_swigregister
DListUIntConstIterC_swigregister(DListUIntConstIterC)

class DListInt64C(_object):
    """Proxy of C++ RavlN::DListC<(RavlN::Int64T)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListInt64C, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListInt64C, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> DListInt64C"""
        this = _Ravl.new_DListInt64C()
        try: self.this.append(this)
        except: self.this = this
    def Empty(self):
        """Empty(self)"""
        return _Ravl.DListInt64C_Empty(self)

    def InsFirst(self, *args):
        """InsFirst(self, dat)"""
        return _Ravl.DListInt64C_InsFirst(self, *args)

    def InsLast(self, *args):
        """InsLast(self, dat)"""
        return _Ravl.DListInt64C_InsLast(self, *args)

    def PopFirst(self):
        """PopFirst(self) -> long"""
        return _Ravl.DListInt64C_PopFirst(self)

    def PopLast(self):
        """PopLast(self) -> long"""
        return _Ravl.DListInt64C_PopLast(self)

    def MoveFirst(self, *args):
        """MoveFirst(self, lst)"""
        return _Ravl.DListInt64C_MoveFirst(self, *args)

    def MoveLast(self, *args):
        """MoveLast(self, lst)"""
        return _Ravl.DListInt64C_MoveLast(self, *args)

    def First(self):
        """First(self) -> long"""
        return _Ravl.DListInt64C_First(self)

    def Last(self):
        """Last(self) -> long"""
        return _Ravl.DListInt64C_Last(self)

    def Del(self, *args):
        """Del(self, x) -> bool"""
        return _Ravl.DListInt64C_Del(self, *args)

    def Contains(self, *args):
        """Contains(self, x) -> bool"""
        return _Ravl.DListInt64C_Contains(self, *args)

    def Nth(self, *args):
        """Nth(self, n) -> long"""
        return _Ravl.DListInt64C_Nth(self, *args)

    __swig_destroy__ = _Ravl.delete_DListInt64C
    __del__ = lambda self : None;
DListInt64C_swigregister = _Ravl.DListInt64C_swigregister
DListInt64C_swigregister(DListInt64C)

class DListInt64IterC(_object):
    """Proxy of C++ RavlN::DLIterC<(RavlN::Int64T)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListInt64IterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListInt64IterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListInt64IterC
        __init__(self, lst) -> DListInt64IterC
        """
        this = _Ravl.new_DListInt64IterC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self):
        """IsValid(self) -> bool"""
        return _Ravl.DListInt64IterC_IsValid(self)

    def First(self):
        """First(self)"""
        return _Ravl.DListInt64IterC_First(self)

    def Last(self):
        """Last(self)"""
        return _Ravl.DListInt64IterC_Last(self)

    def IsElm(self):
        """IsElm(self) -> bool"""
        return _Ravl.DListInt64IterC_IsElm(self)

    def IsFirst(self):
        """IsFirst(self) -> bool"""
        return _Ravl.DListInt64IterC_IsFirst(self)

    def IsLast(self):
        """IsLast(self) -> bool"""
        return _Ravl.DListInt64IterC_IsLast(self)

    def Next(self):
        """Next(self)"""
        return _Ravl.DListInt64IterC_Next(self)

    def Prev(self):
        """Prev(self)"""
        return _Ravl.DListInt64IterC_Prev(self)

    def NextCrc(self):
        """NextCrc(self)"""
        return _Ravl.DListInt64IterC_NextCrc(self)

    def PrevCrc(self):
        """PrevCrc(self)"""
        return _Ravl.DListInt64IterC_PrevCrc(self)

    def Nth(self, *args):
        """Nth(self, n)"""
        return _Ravl.DListInt64IterC_Nth(self, *args)

    def NextData(self):
        """NextData(self) -> long"""
        return _Ravl.DListInt64IterC_NextData(self)

    def PrevData(self):
        """PrevData(self) -> long"""
        return _Ravl.DListInt64IterC_PrevData(self)

    def NextCrcData(self):
        """NextCrcData(self) -> long"""
        return _Ravl.DListInt64IterC_NextCrcData(self)

    def PrevCrcData(self):
        """PrevCrcData(self) -> long"""
        return _Ravl.DListInt64IterC_PrevCrcData(self)

    def Tail(self):
        """Tail(self) -> DListInt64C"""
        return _Ravl.DListInt64IterC_Tail(self)

    def Head(self):
        """Head(self) -> DListInt64C"""
        return _Ravl.DListInt64IterC_Head(self)

    def InclusiveTail(self):
        """InclusiveTail(self) -> DListInt64C"""
        return _Ravl.DListInt64IterC_InclusiveTail(self)

    def InclusiveHead(self):
        """InclusiveHead(self) -> DListInt64C"""
        return _Ravl.DListInt64IterC_InclusiveHead(self)

    def Data(self):
        """Data(self) -> long"""
        return _Ravl.DListInt64IterC_Data(self)

    def __deref__(self):
        """__deref__(self) -> long"""
        return _Ravl.DListInt64IterC___deref__(self)

    __swig_destroy__ = _Ravl.delete_DListInt64IterC
    __del__ = lambda self : None;
DListInt64IterC_swigregister = _Ravl.DListInt64IterC_swigregister
DListInt64IterC_swigregister(DListInt64IterC)

class DListInt64ConstIterC(DListInt64IterC):
    """Proxy of C++ RavlN::ConstDLIterC<(RavlN::Int64T)> class"""
    __swig_setmethods__ = {}
    for _s in [DListInt64IterC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListInt64ConstIterC, name, value)
    __swig_getmethods__ = {}
    for _s in [DListInt64IterC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DListInt64ConstIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListInt64ConstIterC
        __init__(self, copy) -> DListInt64ConstIterC
        """
        this = _Ravl.new_DListInt64ConstIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DListInt64ConstIterC
    __del__ = lambda self : None;
DListInt64ConstIterC_swigregister = _Ravl.DListInt64ConstIterC_swigregister
DListInt64ConstIterC_swigregister(DListInt64ConstIterC)

class DListInt16C(_object):
    """Proxy of C++ RavlN::DListC<(RavlN::Int16T)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListInt16C, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListInt16C, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> DListInt16C"""
        this = _Ravl.new_DListInt16C()
        try: self.this.append(this)
        except: self.this = this
    def Empty(self):
        """Empty(self)"""
        return _Ravl.DListInt16C_Empty(self)

    def InsFirst(self, *args):
        """InsFirst(self, dat)"""
        return _Ravl.DListInt16C_InsFirst(self, *args)

    def InsLast(self, *args):
        """InsLast(self, dat)"""
        return _Ravl.DListInt16C_InsLast(self, *args)

    def PopFirst(self):
        """PopFirst(self) -> short"""
        return _Ravl.DListInt16C_PopFirst(self)

    def PopLast(self):
        """PopLast(self) -> short"""
        return _Ravl.DListInt16C_PopLast(self)

    def MoveFirst(self, *args):
        """MoveFirst(self, lst)"""
        return _Ravl.DListInt16C_MoveFirst(self, *args)

    def MoveLast(self, *args):
        """MoveLast(self, lst)"""
        return _Ravl.DListInt16C_MoveLast(self, *args)

    def First(self):
        """First(self) -> short"""
        return _Ravl.DListInt16C_First(self)

    def Last(self):
        """Last(self) -> short"""
        return _Ravl.DListInt16C_Last(self)

    def Del(self, *args):
        """Del(self, x) -> bool"""
        return _Ravl.DListInt16C_Del(self, *args)

    def Contains(self, *args):
        """Contains(self, x) -> bool"""
        return _Ravl.DListInt16C_Contains(self, *args)

    def Nth(self, *args):
        """Nth(self, n) -> short"""
        return _Ravl.DListInt16C_Nth(self, *args)

    __swig_destroy__ = _Ravl.delete_DListInt16C
    __del__ = lambda self : None;
DListInt16C_swigregister = _Ravl.DListInt16C_swigregister
DListInt16C_swigregister(DListInt16C)

class DListInt16IterC(_object):
    """Proxy of C++ RavlN::DLIterC<(RavlN::Int16T)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListInt16IterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListInt16IterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListInt16IterC
        __init__(self, lst) -> DListInt16IterC
        """
        this = _Ravl.new_DListInt16IterC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self):
        """IsValid(self) -> bool"""
        return _Ravl.DListInt16IterC_IsValid(self)

    def First(self):
        """First(self)"""
        return _Ravl.DListInt16IterC_First(self)

    def Last(self):
        """Last(self)"""
        return _Ravl.DListInt16IterC_Last(self)

    def IsElm(self):
        """IsElm(self) -> bool"""
        return _Ravl.DListInt16IterC_IsElm(self)

    def IsFirst(self):
        """IsFirst(self) -> bool"""
        return _Ravl.DListInt16IterC_IsFirst(self)

    def IsLast(self):
        """IsLast(self) -> bool"""
        return _Ravl.DListInt16IterC_IsLast(self)

    def Next(self):
        """Next(self)"""
        return _Ravl.DListInt16IterC_Next(self)

    def Prev(self):
        """Prev(self)"""
        return _Ravl.DListInt16IterC_Prev(self)

    def NextCrc(self):
        """NextCrc(self)"""
        return _Ravl.DListInt16IterC_NextCrc(self)

    def PrevCrc(self):
        """PrevCrc(self)"""
        return _Ravl.DListInt16IterC_PrevCrc(self)

    def Nth(self, *args):
        """Nth(self, n)"""
        return _Ravl.DListInt16IterC_Nth(self, *args)

    def NextData(self):
        """NextData(self) -> short"""
        return _Ravl.DListInt16IterC_NextData(self)

    def PrevData(self):
        """PrevData(self) -> short"""
        return _Ravl.DListInt16IterC_PrevData(self)

    def NextCrcData(self):
        """NextCrcData(self) -> short"""
        return _Ravl.DListInt16IterC_NextCrcData(self)

    def PrevCrcData(self):
        """PrevCrcData(self) -> short"""
        return _Ravl.DListInt16IterC_PrevCrcData(self)

    def Tail(self):
        """Tail(self) -> DListInt16C"""
        return _Ravl.DListInt16IterC_Tail(self)

    def Head(self):
        """Head(self) -> DListInt16C"""
        return _Ravl.DListInt16IterC_Head(self)

    def InclusiveTail(self):
        """InclusiveTail(self) -> DListInt16C"""
        return _Ravl.DListInt16IterC_InclusiveTail(self)

    def InclusiveHead(self):
        """InclusiveHead(self) -> DListInt16C"""
        return _Ravl.DListInt16IterC_InclusiveHead(self)

    def Data(self):
        """Data(self) -> short"""
        return _Ravl.DListInt16IterC_Data(self)

    def __deref__(self):
        """__deref__(self) -> short"""
        return _Ravl.DListInt16IterC___deref__(self)

    __swig_destroy__ = _Ravl.delete_DListInt16IterC
    __del__ = lambda self : None;
DListInt16IterC_swigregister = _Ravl.DListInt16IterC_swigregister
DListInt16IterC_swigregister(DListInt16IterC)

class DListInt16ConstIterC(DListInt16IterC):
    """Proxy of C++ RavlN::ConstDLIterC<(RavlN::Int16T)> class"""
    __swig_setmethods__ = {}
    for _s in [DListInt16IterC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListInt16ConstIterC, name, value)
    __swig_getmethods__ = {}
    for _s in [DListInt16IterC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DListInt16ConstIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListInt16ConstIterC
        __init__(self, copy) -> DListInt16ConstIterC
        """
        this = _Ravl.new_DListInt16ConstIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DListInt16ConstIterC
    __del__ = lambda self : None;
DListInt16ConstIterC_swigregister = _Ravl.DListInt16ConstIterC_swigregister
DListInt16ConstIterC_swigregister(DListInt16ConstIterC)

class DListByteC(_object):
    """Proxy of C++ RavlN::DListC<(RavlN::ByteT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListByteC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListByteC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> DListByteC"""
        this = _Ravl.new_DListByteC()
        try: self.this.append(this)
        except: self.this = this
    def Empty(self):
        """Empty(self)"""
        return _Ravl.DListByteC_Empty(self)

    def InsFirst(self, *args):
        """InsFirst(self, dat)"""
        return _Ravl.DListByteC_InsFirst(self, *args)

    def InsLast(self, *args):
        """InsLast(self, dat)"""
        return _Ravl.DListByteC_InsLast(self, *args)

    def PopFirst(self):
        """PopFirst(self) -> unsigned char"""
        return _Ravl.DListByteC_PopFirst(self)

    def PopLast(self):
        """PopLast(self) -> unsigned char"""
        return _Ravl.DListByteC_PopLast(self)

    def MoveFirst(self, *args):
        """MoveFirst(self, lst)"""
        return _Ravl.DListByteC_MoveFirst(self, *args)

    def MoveLast(self, *args):
        """MoveLast(self, lst)"""
        return _Ravl.DListByteC_MoveLast(self, *args)

    def First(self):
        """First(self) -> unsigned char"""
        return _Ravl.DListByteC_First(self)

    def Last(self):
        """Last(self) -> unsigned char"""
        return _Ravl.DListByteC_Last(self)

    def Del(self, *args):
        """Del(self, x) -> bool"""
        return _Ravl.DListByteC_Del(self, *args)

    def Contains(self, *args):
        """Contains(self, x) -> bool"""
        return _Ravl.DListByteC_Contains(self, *args)

    def Nth(self, *args):
        """Nth(self, n) -> unsigned char"""
        return _Ravl.DListByteC_Nth(self, *args)

    __swig_destroy__ = _Ravl.delete_DListByteC
    __del__ = lambda self : None;
DListByteC_swigregister = _Ravl.DListByteC_swigregister
DListByteC_swigregister(DListByteC)

class DListByteIterC(_object):
    """Proxy of C++ RavlN::DLIterC<(RavlN::ByteT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListByteIterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListByteIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListByteIterC
        __init__(self, lst) -> DListByteIterC
        """
        this = _Ravl.new_DListByteIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self):
        """IsValid(self) -> bool"""
        return _Ravl.DListByteIterC_IsValid(self)

    def First(self):
        """First(self)"""
        return _Ravl.DListByteIterC_First(self)

    def Last(self):
        """Last(self)"""
        return _Ravl.DListByteIterC_Last(self)

    def IsElm(self):
        """IsElm(self) -> bool"""
        return _Ravl.DListByteIterC_IsElm(self)

    def IsFirst(self):
        """IsFirst(self) -> bool"""
        return _Ravl.DListByteIterC_IsFirst(self)

    def IsLast(self):
        """IsLast(self) -> bool"""
        return _Ravl.DListByteIterC_IsLast(self)

    def Next(self):
        """Next(self)"""
        return _Ravl.DListByteIterC_Next(self)

    def Prev(self):
        """Prev(self)"""
        return _Ravl.DListByteIterC_Prev(self)

    def NextCrc(self):
        """NextCrc(self)"""
        return _Ravl.DListByteIterC_NextCrc(self)

    def PrevCrc(self):
        """PrevCrc(self)"""
        return _Ravl.DListByteIterC_PrevCrc(self)

    def Nth(self, *args):
        """Nth(self, n)"""
        return _Ravl.DListByteIterC_Nth(self, *args)

    def NextData(self):
        """NextData(self) -> unsigned char"""
        return _Ravl.DListByteIterC_NextData(self)

    def PrevData(self):
        """PrevData(self) -> unsigned char"""
        return _Ravl.DListByteIterC_PrevData(self)

    def NextCrcData(self):
        """NextCrcData(self) -> unsigned char"""
        return _Ravl.DListByteIterC_NextCrcData(self)

    def PrevCrcData(self):
        """PrevCrcData(self) -> unsigned char"""
        return _Ravl.DListByteIterC_PrevCrcData(self)

    def Tail(self):
        """Tail(self) -> DListByteC"""
        return _Ravl.DListByteIterC_Tail(self)

    def Head(self):
        """Head(self) -> DListByteC"""
        return _Ravl.DListByteIterC_Head(self)

    def InclusiveTail(self):
        """InclusiveTail(self) -> DListByteC"""
        return _Ravl.DListByteIterC_InclusiveTail(self)

    def InclusiveHead(self):
        """InclusiveHead(self) -> DListByteC"""
        return _Ravl.DListByteIterC_InclusiveHead(self)

    def Data(self):
        """Data(self) -> unsigned char"""
        return _Ravl.DListByteIterC_Data(self)

    def __deref__(self):
        """__deref__(self) -> unsigned char"""
        return _Ravl.DListByteIterC___deref__(self)

    __swig_destroy__ = _Ravl.delete_DListByteIterC
    __del__ = lambda self : None;
DListByteIterC_swigregister = _Ravl.DListByteIterC_swigregister
DListByteIterC_swigregister(DListByteIterC)

class DListByteConstIterC(DListByteIterC):
    """Proxy of C++ RavlN::ConstDLIterC<(RavlN::ByteT)> class"""
    __swig_setmethods__ = {}
    for _s in [DListByteIterC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListByteConstIterC, name, value)
    __swig_getmethods__ = {}
    for _s in [DListByteIterC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DListByteConstIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListByteConstIterC
        __init__(self, copy) -> DListByteConstIterC
        """
        this = _Ravl.new_DListByteConstIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_DListByteConstIterC
    __del__ = lambda self : None;
DListByteConstIterC_swigregister = _Ravl.DListByteConstIterC_swigregister
DListByteConstIterC_swigregister(DListByteConstIterC)

class Point2dC(_object):
    """Proxy of C++ RavlN::Point2dC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point2dC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Point2dC
        __init__(self, x, y) -> Point2dC
        """
        this = _Ravl.new_Point2dC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Row(self):
        """Row(self) -> RealT"""
        return _Ravl.Point2dC_Row(self)

    def Col(self):
        """Col(self) -> RealT"""
        return _Ravl.Point2dC_Col(self)

    __swig_destroy__ = _Ravl.delete_Point2dC
    __del__ = lambda self : None;
Point2dC_swigregister = _Ravl.Point2dC_swigregister
Point2dC_swigregister(Point2dC)

class DListPoint2dC(_object):
    """Proxy of C++ RavlN::DListC<(RavlN::Point2dC)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListPoint2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListPoint2dC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> DListPoint2dC"""
        this = _Ravl.new_DListPoint2dC()
        try: self.this.append(this)
        except: self.this = this
    def Empty(self):
        """Empty(self)"""
        return _Ravl.DListPoint2dC_Empty(self)

    def InsFirst(self, *args):
        """InsFirst(self, dat)"""
        return _Ravl.DListPoint2dC_InsFirst(self, *args)

    def InsLast(self, *args):
        """InsLast(self, dat)"""
        return _Ravl.DListPoint2dC_InsLast(self, *args)

    def PopFirst(self):
        """PopFirst(self) -> Point2dC"""
        return _Ravl.DListPoint2dC_PopFirst(self)

    def PopLast(self):
        """PopLast(self) -> Point2dC"""
        return _Ravl.DListPoint2dC_PopLast(self)

    def MoveFirst(self, *args):
        """MoveFirst(self, lst)"""
        return _Ravl.DListPoint2dC_MoveFirst(self, *args)

    def MoveLast(self, *args):
        """MoveLast(self, lst)"""
        return _Ravl.DListPoint2dC_MoveLast(self, *args)

    def First(self):
        """First(self) -> Point2dC"""
        return _Ravl.DListPoint2dC_First(self)

    def Last(self):
        """Last(self) -> Point2dC"""
        return _Ravl.DListPoint2dC_Last(self)

    def Del(self, *args):
        """Del(self, x) -> bool"""
        return _Ravl.DListPoint2dC_Del(self, *args)

    def Contains(self, *args):
        """Contains(self, x) -> bool"""
        return _Ravl.DListPoint2dC_Contains(self, *args)

    def Nth(self, *args):
        """Nth(self, n) -> Point2dC"""
        return _Ravl.DListPoint2dC_Nth(self, *args)

    __swig_destroy__ = _Ravl.delete_DListPoint2dC
    __del__ = lambda self : None;
DListPoint2dC_swigregister = _Ravl.DListPoint2dC_swigregister
DListPoint2dC_swigregister(DListPoint2dC)

class DListPoint2dIterC(_object):
    """Proxy of C++ RavlN::DLIterC<(RavlN::Point2dC)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DListPoint2dIterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DListPoint2dIterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DListPoint2dIterC
        __init__(self, lst) -> DListPoint2dIterC
        """
        this = _Ravl.new_DListPoint2dIterC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self):
        """IsValid(self) -> bool"""
        return _Ravl.DListPoint2dIterC_IsValid(self)

    def First(self):
        """First(self)"""
        return _Ravl.DListPoint2dIterC_First(self)

    def Last(self):
        """Last(self)"""
        return _Ravl.DListPoint2dIterC_Last(self)

    def IsElm(self):
        """IsElm(self) -> bool"""
        return _Ravl.DListPoint2dIterC_IsElm(self)

    def IsFirst(self):
        """IsFirst(self) -> bool"""
        return _Ravl.DListPoint2dIterC_IsFirst(self)

    def IsLast(self):
        """IsLast(self) -> bool"""
        return _Ravl.DListPoint2dIterC_IsLast(self)

    def Next(self):
        """Next(self)"""
        return _Ravl.DListPoint2dIterC_Next(self)

    def Prev(self):
        """Prev(self)"""
        return _Ravl.DListPoint2dIterC_Prev(self)

    def NextCrc(self):
        """NextCrc(self)"""
        return _Ravl.DListPoint2dIterC_NextCrc(self)

    def PrevCrc(self):
        """PrevCrc(self)"""
        return _Ravl.DListPoint2dIterC_PrevCrc(self)

    def Nth(self, *args):
        """Nth(self, n)"""
        return _Ravl.DListPoint2dIterC_Nth(self, *args)

    def NextData(self):
        """NextData(self) -> Point2dC"""
        return _Ravl.DListPoint2dIterC_NextData(self)

    def PrevData(self):
        """PrevData(self) -> Point2dC"""
        return _Ravl.DListPoint2dIterC_PrevData(self)

    def NextCrcData(self):
        """NextCrcData(self) -> Point2dC"""
        return _Ravl.DListPoint2dIterC_NextCrcData(self)

    def PrevCrcData(self):
        """PrevCrcData(self) -> Point2dC"""
        return _Ravl.DListPoint2dIterC_PrevCrcData(self)

    def Tail(self):
        """Tail(self) -> DListPoint2dC"""
        return _Ravl.DListPoint2dIterC_Tail(self)

    def Head(self):
        """Head(self) -> DListPoint2dC"""
        return _Ravl.DListPoint2dIterC_Head(self)

    def InclusiveTail(self):
        """InclusiveTail(self) -> DListPoint2dC"""
        return _Ravl.DListPoint2dIterC_InclusiveTail(self)

    def InclusiveHead(self):
        """InclusiveHead(self) -> DListPoint2dC"""
        return _Ravl.DListPoint2dIterC_InclusiveHead(self)

    def Data(self):
        """Data(self) -> Point2dC"""
        return _Ravl.DListPoint2dIterC_Data(self)

    def __deref__(self):
        """__deref__(self) -> Point2dC"""
        return _Ravl.DListPoint2dIterC___deref__(self)

    __swig_destroy__ = _Ravl.delete_DListPoint2dIterC
    __del__ = lambda self : None;
    def Row(self):
        """Row(self) -> RealT"""
        return _Ravl.DListPoint2dIterC_Row(self)

    def Col(self):
        """Col(self) -> RealT"""
        return _Ravl.DListPoint2dIterC_Col(self)

DListPoint2dIterC_swigregister = _Ravl.DListPoint2dIterC_swigregister
DListPoint2dIterC_swigregister(DListPoint2dIterC)

class IndexC(_object):
    """Proxy of C++ RavlN::IndexC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> IndexC
        __init__(self, arg0) -> IndexC
        """
        this = _Ravl.new_IndexC(*args)
        try: self.this.append(this)
        except: self.this = this
    def V(self):
        """V(self) -> IntT"""
        return _Ravl.IndexC_V(self)

    __swig_destroy__ = _Ravl.delete_IndexC
    __del__ = lambda self : None;
IndexC_swigregister = _Ravl.IndexC_swigregister
IndexC_swigregister(IndexC)

def ToList(*args):
  """
    ToList(list) -> PyObject
    ToList(list) -> PyObject
    ToList(list) -> PyObject
    ToList(list) -> PyObject
    ToList(list) -> PyObject
    ToList(list) -> PyObject
    ToList(list) -> PyObject
    """
  return _Ravl.ToList(*args)

class Index2dC(_object):
    """Proxy of C++ RavlN::Index2dC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Index2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Index2dC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Index2dC
        __init__(self, x, y) -> Index2dC
        __init__(self, x, y) -> Index2dC
        """
        this = _Ravl.new_Index2dC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Row(self):
        """Row(self) -> IndexC"""
        return _Ravl.Index2dC_Row(self)

    def Col(self):
        """Col(self) -> IndexC"""
        return _Ravl.Index2dC_Col(self)

    __swig_destroy__ = _Ravl.delete_Index2dC
    __del__ = lambda self : None;
Index2dC_swigregister = _Ravl.Index2dC_swigregister
Index2dC_swigregister(Index2dC)

class IndexRange2dC(_object):
    """Proxy of C++ RavlN::IndexRange2dC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexRange2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexRange2dC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> IndexRange2dC"""
        this = _Ravl.new_IndexRange2dC()
        try: self.this.append(this)
        except: self.this = this
    def TRow(self):
        """TRow(self) -> IndexC"""
        return _Ravl.IndexRange2dC_TRow(self)

    def BRow(self):
        """BRow(self) -> IndexC"""
        return _Ravl.IndexRange2dC_BRow(self)

    def LCol(self):
        """LCol(self) -> IndexC"""
        return _Ravl.IndexRange2dC_LCol(self)

    def RCol(self):
        """RCol(self) -> IndexC"""
        return _Ravl.IndexRange2dC_RCol(self)

    def TopLeft(self):
        """TopLeft(self) -> Index2dC"""
        return _Ravl.IndexRange2dC_TopLeft(self)

    def TopRight(self):
        """TopRight(self) -> Index2dC"""
        return _Ravl.IndexRange2dC_TopRight(self)

    def BottomLeft(self):
        """BottomLeft(self) -> Index2dC"""
        return _Ravl.IndexRange2dC_BottomLeft(self)

    def BottomRight(self):
        """BottomRight(self) -> Index2dC"""
        return _Ravl.IndexRange2dC_BottomRight(self)

    def Center(self):
        """Center(self) -> Index2dC"""
        return _Ravl.IndexRange2dC_Center(self)

    def Rows(self):
        """Rows(self) -> IntT"""
        return _Ravl.IndexRange2dC_Rows(self)

    def Cols(self):
        """Cols(self) -> IntT"""
        return _Ravl.IndexRange2dC_Cols(self)

    def Area(self):
        """Area(self) -> SizeT"""
        return _Ravl.IndexRange2dC_Area(self)

    def Contains(self, *args):
        """Contains(self, index) -> bool"""
        return _Ravl.IndexRange2dC_Contains(self, *args)

    def Expand(self, *args):
        """Expand(self, n) -> IndexRange2dC"""
        return _Ravl.IndexRange2dC_Expand(self, *args)

    def ClipBy(self, *args):
        """ClipBy(self, range)"""
        return _Ravl.IndexRange2dC_ClipBy(self, *args)

    __swig_destroy__ = _Ravl.delete_IndexRange2dC
    __del__ = lambda self : None;
IndexRange2dC_swigregister = _Ravl.IndexRange2dC_swigregister
IndexRange2dC_swigregister(IndexRange2dC)

class Array2dByteC(_object):
    """Proxy of C++ RavlN::Array2dC<(RavlN::ByteT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array2dByteC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array2dByteC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Array2dByteC
        __init__(self, rows, cols) -> Array2dByteC
        __init__(self, range) -> Array2dByteC
        """
        this = _Ravl.new_Array2dByteC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Frame(self):
        """Frame(self) -> IndexRange2dC"""
        return _Ravl.Array2dByteC_Frame(self)

    def Fill(self, *args):
        """Fill(self, value)"""
        return _Ravl.Array2dByteC_Fill(self, *args)

    def Stride(self):
        """Stride(self) -> IntT"""
        return _Ravl.Array2dByteC_Stride(self)

    def Access(self, *args):
        """
        Access(self, index) -> unsigned char
        Access(self, r, c) -> unsigned char
        Access(self, r, c) -> unsigned char
        """
        return _Ravl.Array2dByteC_Access(self, *args)

    __swig_destroy__ = _Ravl.delete_Array2dByteC
    __del__ = lambda self : None;
Array2dByteC_swigregister = _Ravl.Array2dByteC_swigregister
Array2dByteC_swigregister(Array2dByteC)

class Array2dRealC(_object):
    """Proxy of C++ RavlN::Array2dC<(RavlN::RealT)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array2dRealC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array2dRealC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Array2dRealC
        __init__(self, rows, cols) -> Array2dRealC
        __init__(self, range) -> Array2dRealC
        """
        this = _Ravl.new_Array2dRealC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Frame(self):
        """Frame(self) -> IndexRange2dC"""
        return _Ravl.Array2dRealC_Frame(self)

    def Fill(self, *args):
        """Fill(self, value)"""
        return _Ravl.Array2dRealC_Fill(self, *args)

    def Stride(self):
        """Stride(self) -> IntT"""
        return _Ravl.Array2dRealC_Stride(self)

    def Access(self, *args):
        """
        Access(self, index) -> double
        Access(self, r, c) -> double
        Access(self, r, c) -> double
        """
        return _Ravl.Array2dRealC_Access(self, *args)

    __swig_destroy__ = _Ravl.delete_Array2dRealC
    __del__ = lambda self : None;
Array2dRealC_swigregister = _Ravl.Array2dRealC_swigregister
Array2dRealC_swigregister(Array2dRealC)

class StringC(_object):
    """Proxy of C++ RavlN::StringC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StringC
        __init__(self, arg0) -> StringC
        """
        this = _Ravl.new_StringC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsEmpty(self):
        """IsEmpty(self) -> bool"""
        return _Ravl.StringC_IsEmpty(self)

    def chars(self):
        """chars(self) -> char"""
        return _Ravl.StringC_chars(self)

    def Size(self):
        """Size(self) -> SizeT"""
        return _Ravl.StringC_Size(self)

    def __str__(self):
        """__str__(self) -> char"""
        return _Ravl.StringC___str__(self)

    __swig_destroy__ = _Ravl.delete_StringC
    __del__ = lambda self : None;
StringC_swigregister = _Ravl.StringC_swigregister
StringC_swigregister(StringC)

class RealRangeC(_object):
    """Proxy of C++ RavlN::RealRangeC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealRangeC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RealRangeC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size = 0) -> RealRangeC
        __init__(self) -> RealRangeC
        __init__(self, minReal, maxReal) -> RealRangeC
        """
        this = _Ravl.new_RealRangeC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Size(self):
        """Size(self) -> RealT"""
        return _Ravl.RealRangeC_Size(self)

    def Range(self):
        """Range(self) -> RealRangeC"""
        return _Ravl.RealRangeC_Range(self)

    def Min(self, *args):
        """
        Min(self) -> RealT
        Min(self) -> RealT
        """
        return _Ravl.RealRangeC_Min(self, *args)

    def Max(self, *args):
        """
        Max(self) -> RealT
        Max(self) -> RealT
        """
        return _Ravl.RealRangeC_Max(self, *args)

    def Center(self):
        """Center(self) -> RealT"""
        return _Ravl.RealRangeC_Center(self)

    def CenterD(self):
        """CenterD(self) -> RealT"""
        return _Ravl.RealRangeC_CenterD(self)

    def Percentage(self, *args):
        """Percentage(self, p) -> RealT"""
        return _Ravl.RealRangeC_Percentage(self, *args)

    def IsEmpty(self):
        """IsEmpty(self) -> bool"""
        return _Ravl.RealRangeC_IsEmpty(self)

    def IsValid(self):
        """IsValid(self) -> bool"""
        return _Ravl.RealRangeC_IsValid(self)

    def Contains(self, *args):
        """
        Contains(self, i) -> bool
        Contains(self, range) -> bool
        """
        return _Ravl.RealRangeC_Contains(self, *args)

    def __eq__(self, *args):
        """__eq__(self, range) -> bool"""
        return _Ravl.RealRangeC___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, range) -> bool"""
        return _Ravl.RealRangeC___ne__(self, *args)

    def In(self, *args):
        """In(self, range) -> bool"""
        return _Ravl.RealRangeC_In(self, *args)

    def IsOverlapping(self, *args):
        """IsOverlapping(self, r) -> bool"""
        return _Ravl.RealRangeC_IsOverlapping(self, *args)

    def SetOrigin(self, *args):
        """SetOrigin(self, position) -> RealRangeC"""
        return _Ravl.RealRangeC_SetOrigin(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, i) -> RealRangeC"""
        return _Ravl.RealRangeC___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(self, i) -> RealRangeC"""
        return _Ravl.RealRangeC___isub__(self, *args)

    def __add__(self, *args):
        """__add__(self, i) -> RealRangeC"""
        return _Ravl.RealRangeC___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(self, i) -> RealRangeC"""
        return _Ravl.RealRangeC___sub__(self, *args)

    def ClipBy(self, *args):
        """ClipBy(self, r) -> RealRangeC"""
        return _Ravl.RealRangeC_ClipBy(self, *args)

    def Clip(self, *args):
        """Clip(self, r) -> RealT"""
        return _Ravl.RealRangeC_Clip(self, *args)

    def FirstHalf(self):
        """FirstHalf(self) -> RealRangeC"""
        return _Ravl.RealRangeC_FirstHalf(self)

    def FirstHalfD(self):
        """FirstHalfD(self) -> RealRangeC"""
        return _Ravl.RealRangeC_FirstHalfD(self)

    def Enlarge(self, *args):
        """Enlarge(self, f) -> RealRangeC"""
        return _Ravl.RealRangeC_Enlarge(self, *args)

    def Expand(self, *args):
        """Expand(self, n) -> RealRangeC"""
        return _Ravl.RealRangeC_Expand(self, *args)

    def Shrink(self, *args):
        """Shrink(self, n) -> RealRangeC"""
        return _Ravl.RealRangeC_Shrink(self, *args)

    def ShrinkHigh(self, *args):
        """ShrinkHigh(self, n) -> RealRangeC"""
        return _Ravl.RealRangeC_ShrinkHigh(self, *args)

    def Swap(self, *args):
        """Swap(self, r) -> RealRangeC"""
        return _Ravl.RealRangeC_Swap(self, *args)

    def Involve(self, *args):
        """
        Involve(self, i) -> RealRangeC
        Involve(self, subRange) -> RealRangeC
        """
        return _Ravl.RealRangeC_Involve(self, *args)

    __swig_destroy__ = _Ravl.delete_RealRangeC
    __del__ = lambda self : None;
RealRangeC_swigregister = _Ravl.RealRangeC_swigregister
RealRangeC_swigregister(RealRangeC)

def PrintIOFormats(*args):
  """
    PrintIOFormats(os = std::cout)
    PrintIOFormats()
    """
  return _Ravl.PrintIOFormats(*args)

def PrintIOConversions(*args):
  """
    PrintIOConversions(os = std::cout)
    PrintIOConversions()
    """
  return _Ravl.PrintIOConversions(*args)

def PrintIOClassTypes(*args):
  """
    PrintIOClassTypes(os = std::cout)
    PrintIOClassTypes()
    """
  return _Ravl.PrintIOClassTypes(*args)

class RealRange2dC(_object):
    """Proxy of C++ RavlN::RealRange2dC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealRange2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RealRange2dC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> RealRange2dC
        __init__(self, rowNumber, colNumber) -> RealRange2dC
        __init__(self, rowRange, colRange) -> RealRange2dC
        __init__(self, range) -> RealRange2dC
        __init__(self, minRow, maxRow, minCol, maxCol) -> RealRange2dC
        """
        this = _Ravl.new_RealRange2dC(*args)
        try: self.this.append(this)
        except: self.this = this
    def TRow(self, *args):
        """
        TRow(self) -> RealT
        TRow(self) -> RealT
        """
        return _Ravl.RealRange2dC_TRow(self, *args)

    def LCol(self, *args):
        """
        LCol(self) -> RealT
        LCol(self) -> RealT
        """
        return _Ravl.RealRange2dC_LCol(self, *args)

    def BRow(self, *args):
        """
        BRow(self) -> RealT
        BRow(self) -> RealT
        """
        return _Ravl.RealRange2dC_BRow(self, *args)

    def RCol(self, *args):
        """
        RCol(self) -> RealT
        RCol(self) -> RealT
        """
        return _Ravl.RealRange2dC_RCol(self, *args)

    def Rows(self):
        """Rows(self) -> RealT"""
        return _Ravl.RealRange2dC_Rows(self)

    def Cols(self):
        """Cols(self) -> RealT"""
        return _Ravl.RealRange2dC_Cols(self)

    def Area(self):
        """Area(self) -> RealT"""
        return _Ravl.RealRange2dC_Area(self)

    def Dilate(self):
        """Dilate(self) -> RealRange2dC"""
        return _Ravl.RealRange2dC_Dilate(self)

    def Erode(self):
        """Erode(self) -> RealRange2dC"""
        return _Ravl.RealRange2dC_Erode(self)

    def Expand(self, *args):
        """Expand(self, n) -> RealRange2dC"""
        return _Ravl.RealRange2dC_Expand(self, *args)

    def Shrink(self, *args):
        """Shrink(self, n) -> RealRange2dC"""
        return _Ravl.RealRange2dC_Shrink(self, *args)

    def ClipBy(self, *args):
        """ClipBy(self, r) -> RealRange2dC"""
        return _Ravl.RealRange2dC_ClipBy(self, *args)

    def Contains(self, *args):
        """Contains(self, oth) -> bool"""
        return _Ravl.RealRange2dC_Contains(self, *args)

    def RowRange(self):
        """RowRange(self) -> RealRangeC"""
        return _Ravl.RealRange2dC_RowRange(self)

    def ColRange(self):
        """ColRange(self) -> RealRangeC"""
        return _Ravl.RealRange2dC_ColRange(self)

    def Range1(self):
        """Range1(self) -> RealRangeC"""
        return _Ravl.RealRange2dC_Range1(self)

    def Range2(self):
        """Range2(self) -> RealRangeC"""
        return _Ravl.RealRange2dC_Range2(self)

    def Involve(self, *args):
        """Involve(self, subrectangle)"""
        return _Ravl.RealRange2dC_Involve(self, *args)

    def IsValid(self):
        """IsValid(self) -> bool"""
        return _Ravl.RealRange2dC_IsValid(self)

    def __eq__(self, *args):
        """__eq__(self, oth) -> bool"""
        return _Ravl.RealRange2dC___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, oth) -> bool"""
        return _Ravl.RealRange2dC___ne__(self, *args)

    def IsOverlapping(self, *args):
        """IsOverlapping(self, r) -> bool"""
        return _Ravl.RealRange2dC_IsOverlapping(self, *args)

    __swig_destroy__ = _Ravl.delete_RealRange2dC
    __del__ = lambda self : None;
RealRange2dC_swigregister = _Ravl.RealRange2dC_swigregister
RealRange2dC_swigregister(RealRange2dC)

class PointSet2dC(DListPoint2dC):
    """Proxy of C++ RavlN::PointSet2dC class"""
    __swig_setmethods__ = {}
    for _s in [DListPoint2dC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointSet2dC, name, value)
    __swig_getmethods__ = {}
    for _s in [DListPoint2dC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PointSet2dC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> PointSet2dC"""
        this = _Ravl.new_PointSet2dC()
        try: self.this.append(this)
        except: self.this = this
    def Centroid(self):
        """Centroid(self) -> Point2dC"""
        return _Ravl.PointSet2dC_Centroid(self)

    def BoundingRectangle(self):
        """BoundingRectangle(self) -> RealRange2dC"""
        return _Ravl.PointSet2dC_BoundingRectangle(self)

    __swig_destroy__ = _Ravl.delete_PointSet2dC
    __del__ = lambda self : None;
PointSet2dC_swigregister = _Ravl.PointSet2dC_swigregister
PointSet2dC_swigregister(PointSet2dC)

class Polygon2dC(PointSet2dC):
    """Proxy of C++ RavlN::Polygon2dC class"""
    __swig_setmethods__ = {}
    for _s in [PointSet2dC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polygon2dC, name, value)
    __swig_getmethods__ = {}
    for _s in [PointSet2dC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Polygon2dC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> Polygon2dC"""
        this = _Ravl.new_Polygon2dC()
        try: self.this.append(this)
        except: self.this = this
    def Size(self):
        """Size(self) -> SizeT"""
        return _Ravl.Polygon2dC_Size(self)

    def InsLast(self, *args):
        """InsLast(self, point)"""
        return _Ravl.Polygon2dC_InsLast(self, *args)

    __swig_destroy__ = _Ravl.delete_Polygon2dC
    __del__ = lambda self : None;
Polygon2dC_swigregister = _Ravl.Polygon2dC_swigregister
Polygon2dC_swigregister(Polygon2dC)

class ByteRGBArray2dC(_object):
    """Proxy of C++ RavlN::Array2dC<(RavlImageN::ByteRGBValueC)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteRGBArray2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ByteRGBArray2dC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ByteRGBArray2dC
        __init__(self, rows, cols) -> ByteRGBArray2dC
        __init__(self, range) -> ByteRGBArray2dC
        """
        this = _Ravl.new_ByteRGBArray2dC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Frame(self):
        """Frame(self) -> IndexRange2dC"""
        return _Ravl.ByteRGBArray2dC_Frame(self)

    def Fill(self, *args):
        """Fill(self, value)"""
        return _Ravl.ByteRGBArray2dC_Fill(self, *args)

    def Stride(self):
        """Stride(self) -> IntT"""
        return _Ravl.ByteRGBArray2dC_Stride(self)

    def Access(self, *args):
        """
        Access(self, index) -> ByteRGBValueC
        Access(self, r, c) -> ByteRGBValueC
        Access(self, r, c) -> ByteRGBValueC
        """
        return _Ravl.ByteRGBArray2dC_Access(self, *args)

    __swig_destroy__ = _Ravl.delete_ByteRGBArray2dC
    __del__ = lambda self : None;
ByteRGBArray2dC_swigregister = _Ravl.ByteRGBArray2dC_swigregister
ByteRGBArray2dC_swigregister(ByteRGBArray2dC)

class RealRGBArray2dC(_object):
    """Proxy of C++ RavlN::Array2dC<(RavlImageN::RealRGBValueC)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealRGBArray2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RealRGBArray2dC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> RealRGBArray2dC
        __init__(self, rows, cols) -> RealRGBArray2dC
        __init__(self, range) -> RealRGBArray2dC
        """
        this = _Ravl.new_RealRGBArray2dC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Frame(self):
        """Frame(self) -> IndexRange2dC"""
        return _Ravl.RealRGBArray2dC_Frame(self)

    def Fill(self, *args):
        """Fill(self, value)"""
        return _Ravl.RealRGBArray2dC_Fill(self, *args)

    def Stride(self):
        """Stride(self) -> IntT"""
        return _Ravl.RealRGBArray2dC_Stride(self)

    def Access(self, *args):
        """
        Access(self, index) -> RealRGBValueC
        Access(self, r, c) -> RealRGBValueC
        Access(self, r, c) -> RealRGBValueC
        """
        return _Ravl.RealRGBArray2dC_Access(self, *args)

    __swig_destroy__ = _Ravl.delete_RealRGBArray2dC
    __del__ = lambda self : None;
RealRGBArray2dC_swigregister = _Ravl.RealRGBArray2dC_swigregister
RealRGBArray2dC_swigregister(RealRGBArray2dC)

class RealRGBValueC(_object):
    """Proxy of C++ RavlImageN::RealRGBValueC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealRGBValueC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RealRGBValueC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, r, g, b) -> RealRGBValueC"""
        this = _Ravl.new_RealRGBValueC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Red(self):
        """Red(self) -> RealT"""
        return _Ravl.RealRGBValueC_Red(self)

    def Green(self):
        """Green(self) -> RealT"""
        return _Ravl.RealRGBValueC_Green(self)

    def Blue(self):
        """Blue(self) -> RealT"""
        return _Ravl.RealRGBValueC_Blue(self)

    __swig_destroy__ = _Ravl.delete_RealRGBValueC
    __del__ = lambda self : None;
RealRGBValueC_swigregister = _Ravl.RealRGBValueC_swigregister
RealRGBValueC_swigregister(RealRGBValueC)

class ByteRGBValueC(_object):
    """Proxy of C++ RavlImageN::ByteRGBValueC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteRGBValueC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ByteRGBValueC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, r, g, b) -> ByteRGBValueC"""
        this = _Ravl.new_ByteRGBValueC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Red(self):
        """Red(self) -> IntT"""
        return _Ravl.ByteRGBValueC_Red(self)

    def Green(self):
        """Green(self) -> IntT"""
        return _Ravl.ByteRGBValueC_Green(self)

    def Blue(self):
        """Blue(self) -> IntT"""
        return _Ravl.ByteRGBValueC_Blue(self)

    __swig_destroy__ = _Ravl.delete_ByteRGBValueC
    __del__ = lambda self : None;
ByteRGBValueC_swigregister = _Ravl.ByteRGBValueC_swigregister
ByteRGBValueC_swigregister(ByteRGBValueC)

class ImageByteRGBValueC(ByteRGBArray2dC):
    """Proxy of C++ RavlImageN::ImageC<(RavlImageN::ByteRGBValueC)> class"""
    __swig_setmethods__ = {}
    for _s in [ByteRGBArray2dC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageByteRGBValueC, name, value)
    __swig_getmethods__ = {}
    for _s in [ByteRGBArray2dC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageByteRGBValueC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ImageByteRGBValueC
        __init__(self, rows, cols) -> ImageByteRGBValueC
        __init__(self, range) -> ImageByteRGBValueC
        __init__(self, rows, cols, data, deletable = True) -> ImageByteRGBValueC
        __init__(self, rows, cols, data) -> ImageByteRGBValueC
        __init__(self, img, range) -> ImageByteRGBValueC
        """
        this = _Ravl.new_ImageByteRGBValueC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Rows(self):
        """Rows(self) -> SizeT"""
        return _Ravl.ImageByteRGBValueC_Rows(self)

    def Cols(self):
        """Cols(self) -> SizeT"""
        return _Ravl.ImageByteRGBValueC_Cols(self)

    def Row(self, *args):
        """Row(self, row) -> ByteRGBValueC"""
        return _Ravl.ImageByteRGBValueC_Row(self, *args)

    def Stride(self):
        """Stride(self) -> IntT"""
        return _Ravl.ImageByteRGBValueC_Stride(self)

    def DataAsString(self):
        """DataAsString(self) -> PyObject"""
        return _Ravl.ImageByteRGBValueC_DataAsString(self)

    def DataAsStringTriple(self):
        """DataAsStringTriple(self) -> PyObject"""
        return _Ravl.ImageByteRGBValueC_DataAsStringTriple(self)

    __swig_destroy__ = _Ravl.delete_ImageByteRGBValueC
    __del__ = lambda self : None;
ImageByteRGBValueC_swigregister = _Ravl.ImageByteRGBValueC_swigregister
ImageByteRGBValueC_swigregister(ImageByteRGBValueC)

class ImageByteC(Array2dByteC):
    """Proxy of C++ RavlImageN::ImageC<(RavlN::ByteT)> class"""
    __swig_setmethods__ = {}
    for _s in [Array2dByteC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageByteC, name, value)
    __swig_getmethods__ = {}
    for _s in [Array2dByteC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageByteC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ImageByteC
        __init__(self, rows, cols) -> ImageByteC
        __init__(self, range) -> ImageByteC
        __init__(self, rows, cols, data, deletable = True) -> ImageByteC
        __init__(self, rows, cols, data) -> ImageByteC
        __init__(self, img, range) -> ImageByteC
        """
        this = _Ravl.new_ImageByteC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Rows(self):
        """Rows(self) -> SizeT"""
        return _Ravl.ImageByteC_Rows(self)

    def Cols(self):
        """Cols(self) -> SizeT"""
        return _Ravl.ImageByteC_Cols(self)

    def Row(self, *args):
        """Row(self, row) -> unsigned char"""
        return _Ravl.ImageByteC_Row(self, *args)

    def Stride(self):
        """Stride(self) -> IntT"""
        return _Ravl.ImageByteC_Stride(self)

    def DataAsString(self):
        """DataAsString(self) -> PyObject"""
        return _Ravl.ImageByteC_DataAsString(self)

    def DataAsStringTriple(self):
        """DataAsStringTriple(self) -> PyObject"""
        return _Ravl.ImageByteC_DataAsStringTriple(self)

    __swig_destroy__ = _Ravl.delete_ImageByteC
    __del__ = lambda self : None;
ImageByteC_swigregister = _Ravl.ImageByteC_swigregister
ImageByteC_swigregister(ImageByteC)

class FontC(_object):
    """Proxy of C++ RavlImageN::FontC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FontC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FontC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> FontC"""
        this = _Ravl.new_FontC()
        try: self.this.append(this)
        except: self.this = this
    def IsValid(self):
        """IsValid(self) -> bool"""
        return _Ravl.FontC_IsValid(self)

    def Center(self, *args):
        """Center(self, text) -> Index2dC"""
        return _Ravl.FontC_Center(self, *args)

    def Size(self, *args):
        """Size(self, text) -> Index2dC"""
        return _Ravl.FontC_Size(self, *args)

    def Count(self):
        """Count(self) -> UIntT"""
        return _Ravl.FontC_Count(self)

    __swig_destroy__ = _Ravl.delete_FontC
    __del__ = lambda self : None;
FontC_swigregister = _Ravl.FontC_swigregister
FontC_swigregister(FontC)

def Save(*args):
  """
    Save(arg0, arg1) -> bool
    Save(arg0, arg1) -> bool
    Save(arg0, arg1) -> bool
    Save(arg0, arg1) -> bool
    """
  return _Ravl.Save(*args)

def Load(*args):
  """
    Load(arg0, arg1) -> bool
    Load(arg0, arg1) -> bool
    Load(arg0, arg1) -> bool
    Load(arg0, arg1) -> bool
    """
  return _Ravl.Load(*args)

def DrawPolygon(*args):
  """
    DrawPolygon(arg0, arg1, poly, fill = False)
    DrawPolygon(arg0, arg1, poly)
    DrawPolygon(arg0, arg1, poly, fill = False)
    DrawPolygon(arg0, arg1, poly)
    """
  return _Ravl.DrawPolygon(*args)


def DefaultFont():
  """DefaultFont() -> FontC"""
  return _Ravl.DefaultFont()

def DrawTextByteRGB(*args):
  """DrawTextByteRGB(font, value, offset, text, image)"""
  return _Ravl.DrawTextByteRGB(*args)

def DrawTextByte(*args):
  """DrawTextByte(font, value, offset, text, image)"""
  return _Ravl.DrawTextByte(*args)

def DrawTextCenterByteRGB(*args):
  """DrawTextCenterByteRGB(font, value, offset, text, image)"""
  return _Ravl.DrawTextCenterByteRGB(*args)

def DrawTextCenterByte(*args):
  """DrawTextCenterByte(font, value, offset, text, image)"""
  return _Ravl.DrawTextCenterByte(*args)
class Affine2dC(_object):
    """Proxy of C++ RavlN::Affine2dC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Affine2dC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Affine2dC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> Affine2dC"""
        this = _Ravl.new_Affine2dC()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ravl.delete_Affine2dC
    __del__ = lambda self : None;
Affine2dC_swigregister = _Ravl.Affine2dC_swigregister
Affine2dC_swigregister(Affine2dC)

class DateC(_object):
    """Proxy of C++ RavlN::DateC class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DateC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DateC, name)
    __repr__ = _swig_repr
    def NowUTC():
        """NowUTC() -> DateC"""
        return _Ravl.DateC_NowUTC()

    if _newclass:NowUTC = staticmethod(NowUTC)
    __swig_getmethods__["NowUTC"] = lambda x: NowUTC
    def NowLocal():
        """NowLocal() -> DateC"""
        return _Ravl.DateC_NowLocal()

    if _newclass:NowLocal = staticmethod(NowLocal)
    __swig_getmethods__["NowLocal"] = lambda x: NowLocal
    def NowVirtual():
        """NowVirtual() -> DateC"""
        return _Ravl.DateC_NowVirtual()

    if _newclass:NowVirtual = staticmethod(NowVirtual)
    __swig_getmethods__["NowVirtual"] = lambda x: NowVirtual
    def TimeZoneOffset():
        """TimeZoneOffset() -> DateC"""
        return _Ravl.DateC_TimeZoneOffset()

    if _newclass:TimeZoneOffset = staticmethod(TimeZoneOffset)
    __swig_getmethods__["TimeZoneOffset"] = lambda x: TimeZoneOffset
    def __init__(self, *args): 
        """
        __init__(self) -> DateC
        __init__(self, setval, useVirt = False) -> DateC
        __init__(self, setval) -> DateC
        __init__(self, val) -> DateC
        __init__(self, year, month, day, hour = 0, min = 0, sec = 0, usec = 0, 
            useLocalTimeZone = False) -> DateC
        __init__(self, year, month, day, hour = 0, min = 0, sec = 0, usec = 0) -> DateC
        __init__(self, year, month, day, hour = 0, min = 0, sec = 0) -> DateC
        __init__(self, year, month, day, hour = 0, min = 0) -> DateC
        __init__(self, year, month, day, hour = 0) -> DateC
        __init__(self, year, month, day) -> DateC
        __init__(self, xsec, xusec) -> DateC
        __init__(self, val) -> DateC
        __init__(self, str) -> DateC
        """
        this = _Ravl.new_DateC(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsLeapYear(*args):
        """IsLeapYear(year) -> bool"""
        return _Ravl.DateC_IsLeapYear(*args)

    if _newclass:IsLeapYear = staticmethod(IsLeapYear)
    __swig_getmethods__["IsLeapYear"] = lambda x: IsLeapYear
    def YearToDaysSince1970(*args):
        """YearToDaysSince1970(year) -> int"""
        return _Ravl.DateC_YearToDaysSince1970(*args)

    if _newclass:YearToDaysSince1970 = staticmethod(YearToDaysSince1970)
    __swig_getmethods__["YearToDaysSince1970"] = lambda x: YearToDaysSince1970
    def IsValid(self):
        """IsValid(self) -> bool"""
        return _Ravl.DateC_IsValid(self)

    def IsZero(self):
        """IsZero(self) -> bool"""
        return _Ravl.DateC_IsZero(self)

    def SetInvalid(self):
        """SetInvalid(self)"""
        return _Ravl.DateC_SetInvalid(self)

    def SetToNow(self, useVirt = False):
        """
        SetToNow(self, useVirt = False)
        SetToNow(self)
        """
        return _Ravl.DateC_SetToNow(self, useVirt)

    def MaxUSeconds(self):
        """MaxUSeconds(self) -> long"""
        return _Ravl.DateC_MaxUSeconds(self)

    def Resolution(self):
        """Resolution(self) -> long"""
        return _Ravl.DateC_Resolution(self)

    def NormalisePos(self):
        """NormalisePos(self)"""
        return _Ravl.DateC_NormalisePos(self)

    def NormaliseNeg(self):
        """NormaliseNeg(self)"""
        return _Ravl.DateC_NormaliseNeg(self)

    def __eq__(self, *args):
        """__eq__(self, oth) -> bool"""
        return _Ravl.DateC___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, oth) -> bool"""
        return _Ravl.DateC___ne__(self, *args)

    def __gt__(self, *args):
        """__gt__(self, oth) -> bool"""
        return _Ravl.DateC___gt__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, oth) -> bool"""
        return _Ravl.DateC___lt__(self, *args)

    def __ge__(self, *args):
        """__ge__(self, oth) -> bool"""
        return _Ravl.DateC___ge__(self, *args)

    def __le__(self, *args):
        """__le__(self, oth) -> bool"""
        return _Ravl.DateC___le__(self, *args)

    def __add__(self, *args):
        """__add__(self, oth) -> DateC"""
        return _Ravl.DateC___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(self, oth) -> DateC"""
        return _Ravl.DateC___sub__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, val) -> DateC
        __isub__(self, val) -> DateC
        """
        return _Ravl.DateC___isub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, val) -> DateC
        __iadd__(self, val) -> DateC
        """
        return _Ravl.DateC___iadd__(self, *args)

    def Text(self):
        """Text(self) -> StringC"""
        return _Ravl.DateC_Text(self)

    def ODBC(self, convertUTCToLocal = False):
        """
        ODBC(self, convertUTCToLocal = False) -> StringC
        ODBC(self) -> StringC
        """
        return _Ravl.DateC_ODBC(self, convertUTCToLocal)

    def SetODBC(self, *args):
        """SetODBC(self, odbcStr) -> bool"""
        return _Ravl.DateC_SetODBC(self, *args)

    def CTime(self, convertUTCToLocal = False):
        """
        CTime(self, convertUTCToLocal = False) -> StringC
        CTime(self) -> StringC
        """
        return _Ravl.DateC_CTime(self, convertUTCToLocal)

    def CTimeShort(self, convertUTCToLocal = False):
        """
        CTimeShort(self, convertUTCToLocal = False) -> StringC
        CTimeShort(self) -> StringC
        """
        return _Ravl.DateC_CTimeShort(self, convertUTCToLocal)

    def USeconds(self):
        """USeconds(self) -> long"""
        return _Ravl.DateC_USeconds(self)

    def TotalSeconds(self):
        """TotalSeconds(self) -> long"""
        return _Ravl.DateC_TotalSeconds(self)

    def Double(self):
        """Double(self) -> double"""
        return _Ravl.DateC_Double(self)

    def Seconds(self, convertUTCToLocal = False):
        """
        Seconds(self, convertUTCToLocal = False) -> IntT
        Seconds(self) -> IntT
        """
        return _Ravl.DateC_Seconds(self, convertUTCToLocal)

    def Minute(self, convertUTCToLocal = False):
        """
        Minute(self, convertUTCToLocal = False) -> IntT
        Minute(self) -> IntT
        """
        return _Ravl.DateC_Minute(self, convertUTCToLocal)

    def Hour(self, convertUTCToLocal = False):
        """
        Hour(self, convertUTCToLocal = False) -> IntT
        Hour(self) -> IntT
        """
        return _Ravl.DateC_Hour(self, convertUTCToLocal)

    def Month(self, convertUTCToLocal = False):
        """
        Month(self, convertUTCToLocal = False) -> IntT
        Month(self) -> IntT
        """
        return _Ravl.DateC_Month(self, convertUTCToLocal)

    def Year(self, convertUTCToLocal = False):
        """
        Year(self, convertUTCToLocal = False) -> IntT
        Year(self) -> IntT
        """
        return _Ravl.DateC_Year(self, convertUTCToLocal)

    def DayInMonth(self, convertUTCToLocal = False):
        """
        DayInMonth(self, convertUTCToLocal = False) -> IntT
        DayInMonth(self) -> IntT
        """
        return _Ravl.DateC_DayInMonth(self, convertUTCToLocal)

    def DayInYear(self, convertUTCToLocal = False):
        """
        DayInYear(self, convertUTCToLocal = False) -> IntT
        DayInYear(self) -> IntT
        """
        return _Ravl.DateC_DayInYear(self, convertUTCToLocal)

    def DayInWeek(self, convertUTCToLocal = False):
        """
        DayInWeek(self, convertUTCToLocal = False) -> IntT
        DayInWeek(self) -> IntT
        """
        return _Ravl.DateC_DayInWeek(self, convertUTCToLocal)

    def TextDayInWeek(self, convertUTCToLocal = False):
        """
        TextDayInWeek(self, convertUTCToLocal = False) -> StringC
        TextDayInWeek(self) -> StringC
        """
        return _Ravl.DateC_TextDayInWeek(self, convertUTCToLocal)

    def DaylightSaving(self):
        """DaylightSaving(self) -> bool"""
        return _Ravl.DateC_DaylightSaving(self)

    def Wait(self):
        """Wait(self) -> bool"""
        return _Ravl.DateC_Wait(self)

    __swig_destroy__ = _Ravl.delete_DateC
    __del__ = lambda self : None;
DateC_swigregister = _Ravl.DateC_swigregister
DateC_swigregister(DateC)

def DateC_NowUTC():
  """DateC_NowUTC() -> DateC"""
  return _Ravl.DateC_NowUTC()

def DateC_NowLocal():
  """DateC_NowLocal() -> DateC"""
  return _Ravl.DateC_NowLocal()

def DateC_NowVirtual():
  """DateC_NowVirtual() -> DateC"""
  return _Ravl.DateC_NowVirtual()

def DateC_TimeZoneOffset():
  """DateC_TimeZoneOffset() -> DateC"""
  return _Ravl.DateC_TimeZoneOffset()

def DateC_IsLeapYear(*args):
  """DateC_IsLeapYear(year) -> bool"""
  return _Ravl.DateC_IsLeapYear(*args)

def DateC_YearToDaysSince1970(*args):
  """DateC_YearToDaysSince1970(year) -> int"""
  return _Ravl.DateC_YearToDaysSince1970(*args)

class HashInt64Int64C(_object):
    """Proxy of C++ RavlN::HashC<(RavlN::Int64T,RavlN::Int64T)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashInt64Int64C, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashInt64Int64C, name)
    __repr__ = _swig_repr
    def __init__(self, nBins = 23): 
        """
        __init__(self, nBins = 23) -> HashInt64Int64C
        __init__(self) -> HashInt64Int64C
        """
        this = _Ravl.new_HashInt64Int64C(nBins)
        try: self.this.append(this)
        except: self.this = this
    def Lookup(self, *args):
        """Lookup(self, key) -> bool"""
        return _Ravl.HashInt64Int64C_Lookup(self, *args)

    def Update(self, *args):
        """
        Update(self, key, data) -> bool
        Update(self, key) -> long
        """
        return _Ravl.HashInt64Int64C_Update(self, *args)

    def Insert(self, *args):
        """Insert(self, key, data) -> bool"""
        return _Ravl.HashInt64Int64C_Insert(self, *args)

    def Access(self, *args):
        """
        Access(self, key, _def = long()) -> long
        Access(self, key) -> long
        """
        return _Ravl.HashInt64Int64C_Access(self, *args)

    def AccessCopy(self, *args):
        """
        AccessCopy(self, key, _def = long()) -> long
        AccessCopy(self, key) -> long
        """
        return _Ravl.HashInt64Int64C_AccessCopy(self, *args)

    def Del(self, *args):
        """
        Del(self, key, allowResize = True) -> bool
        Del(self, key) -> bool
        """
        return _Ravl.HashInt64Int64C_Del(self, *args)

    def Get(self, *args):
        """
        Get(self, key, allowResize = True) -> long
        Get(self, key) -> long
        """
        return _Ravl.HashInt64Int64C_Get(self, *args)

    def IsElm(self, *args):
        """IsElm(self, key) -> bool"""
        return _Ravl.HashInt64Int64C_IsElm(self, *args)

    def Empty(self):
        """Empty(self)"""
        return _Ravl.HashInt64Int64C_Empty(self)

    def Bins(self):
        """Bins(self) -> UIntT"""
        return _Ravl.HashInt64Int64C_Bins(self)

    def Resize(self, *args):
        """Resize(self, newSize)"""
        return _Ravl.HashInt64Int64C_Resize(self, *args)

    __swig_destroy__ = _Ravl.delete_HashInt64Int64C
    __del__ = lambda self : None;
HashInt64Int64C_swigregister = _Ravl.HashInt64Int64C_swigregister
HashInt64Int64C_swigregister(HashInt64Int64C)

class HashInt64Int64IterC(_object):
    """Proxy of C++ RavlN::HashIterC<(RavlN::Int64T,RavlN::Int64T)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashInt64Int64IterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashInt64Int64IterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> HashInt64Int64IterC
        __init__(self, nTab) -> HashInt64Int64IterC
        __init__(self, oth) -> HashInt64Int64IterC
        """
        this = _Ravl.new_HashInt64Int64IterC(*args)
        try: self.this.append(this)
        except: self.this = this
    def First(self):
        """First(self) -> bool"""
        return _Ravl.HashInt64Int64IterC_First(self)

    def Next(self):
        """Next(self) -> bool"""
        return _Ravl.HashInt64Int64IterC_Next(self)

    def IsElm(self):
        """IsElm(self) -> bool"""
        return _Ravl.HashInt64Int64IterC_IsElm(self)

    def Key(self):
        """Key(self) -> long"""
        return _Ravl.HashInt64Int64IterC_Key(self)

    def Data(self, *args):
        """
        Data(self) -> long
        Data(self) -> long
        """
        return _Ravl.HashInt64Int64IterC_Data(self, *args)

    def Del(self):
        """Del(self) -> bool"""
        return _Ravl.HashInt64Int64IterC_Del(self)

    __swig_destroy__ = _Ravl.delete_HashInt64Int64IterC
    __del__ = lambda self : None;
HashInt64Int64IterC_swigregister = _Ravl.HashInt64Int64IterC_swigregister
HashInt64Int64IterC_swigregister(HashInt64Int64IterC)

class DPIPortImageByteC(_object):
    """Proxy of C++ RavlN::DPIPortC<(RavlImageN::ImageC<(RavlN::ByteT)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPIPortImageByteC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPIPortImageByteC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> DPIPortImageByteC"""
        this = _Ravl.new_DPIPortImageByteC()
        try: self.this.append(this)
        except: self.this = this
    def Get(self, *args):
        """Get(self, buff) -> bool"""
        return _Ravl.DPIPortImageByteC_Get(self, *args)

    def SetAttr(self, *args):
        """SetAttr(self, attrName, attrValue) -> bool"""
        return _Ravl.DPIPortImageByteC_SetAttr(self, *args)

    def GetAttr(self, *args):
        """GetAttr(self, attrName, attrValue) -> bool"""
        return _Ravl.DPIPortImageByteC_GetAttr(self, *args)

    __swig_destroy__ = _Ravl.delete_DPIPortImageByteC
    __del__ = lambda self : None;
DPIPortImageByteC_swigregister = _Ravl.DPIPortImageByteC_swigregister
DPIPortImageByteC_swigregister(DPIPortImageByteC)


def OpenISequence(*args):
  """OpenISequence(arg0, arg1) -> bool"""
  return _Ravl.OpenISequence(*args)


