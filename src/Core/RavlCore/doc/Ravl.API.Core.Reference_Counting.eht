! author="Charles Galambos; Bill Christmas"
: Memory management system. 

<p>These classes provide a thread safe reference counting mechanism used
in most of the classes in RAVL. Note: to keep the implementation
simple and efficient we don't do any kind of garbage collection, so if
you create a loop of references the objects in question will NOT be
destroyed automatically.  The two common ways of getting around this
problem are to either use a container class like GraphC which can cope
with loops of references or to make a parent class for the structure
which manages the destruction of the object ensuring all the loops
are broken when they are no longer needed. </p>

    <ul>
      <li> For an example of how to write a simple reference counted class see
<a href="../../Examples/exRefCounter.cc.html">exRefCounter.cc</a>.</li>
      <li> If
you want to create a class hierarchy with inheritance,
<a href="../../Examples/exRefCounterInherit.cc.html">exRefCounterInherit.cc</a> shows
how.</li>
      <li>If the base class of the hierarchy is abstract, use <a href="../../Examples/exRefCounterAbstractInherit.cc.html">exRefCounterAbstractInherit.cc</a> instead.</li>
    </ul>

 <p>For more information on how to use reference counted classes see <a
href="Ravl.Introduction.Reference_Counting.html">Ravl.Introduction.Reference
Counting</a></p>
