! author="Charles Galambos"
: Indexing from 1-D to N-D for arrays, images and hash tables

<h2> Co-ordinate systems in RAVL </h2>

Before using these classes it is worth looking at the notes on the
co-ordinate system conventions used in RAVL 
<a href="Ravl.Introduction.Coordinate_Systems.html">Ravl.Introduction.Coordinate_Systems</a>
- they aren't always quite what you expect. (It's one of those areas where it's
impossible to keep everyone happy.)

<h2> <a name=INDEXC>Do I use <SAMP> <a
href="../Class/RavlN.IndexC.html">IndexC</a></SAMP> or <SAMP>int</SAMP>?
</a></h2>

<P>
The problems with the basic <SAMP>int</SAMP> type in C / C++ are manifold.  Our
main complaints are: 
</P>

<ul>

<li> When an <SAMP>int</SAMP> is combined with an <SAMP>unsigned int</SAMP>,
the <SAMP>int</SAMP> is converted to <SAMP>unsigned int</SAMP> before the
operation is performed.  This can lead to bizarre results for multiplication,
division and modulo operators where one of the operands is negative.

<li> The <SAMP>int</SAMP> division operator always rounds towards zero, as does
conversion from <SAMP>float</SAMP> or <SAMP>double</SAMP>, regardless of the
sign of the operands.

<li> The size of many RAVL objects is returned as <SAMP>unsigned</SAMP>, which
typically causes compilation warnings to be generated by comparison operations
in loops etc. unless <SAMP>IndexC</SAMP> is used.

</ul>

<P> 
We have attempted to address these problems in the
<SAMP>IndexC</SAMP> class, without sacrificing efficiency where possible.  So, for anything that could be regarded as
an index variable (<SAMP>for</SAMP> loop variables, array indices
etc.) we would recommend using <SAMP>IndexC</SAMP>.  
</P>

