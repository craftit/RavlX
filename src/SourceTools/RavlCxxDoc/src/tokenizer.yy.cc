#line 2 "tokenizer.yy.cc"

#line 4 "tokenizer.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
#include <cstdio>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 112
#define YY_END_OF_BUFFER 113
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[360] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,  113,  111,
        1,  110,   50,  111,  111,   47,   42,  111,   72,   73,
       45,   43,   71,   44,  111,   46,   89,   36,   70,   40,
       39,   41,   88,   88,   88,   88,   88,   76,   77,   49,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   74,   48,   75,
       38,  109,  108,  108,  109,  104,    1,  105,  104,  104,
      109,    1,   69,    0,   94,    0,  100,   65,   66,   58,
        0,    0,   57,   55,   56,   53,    0,  106,    0,   60,
       90,   89,   37,   51,   61,   68,   62,   52,   88,   88,

        0,    0,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   59,   67,  107,  101,
      103,  102,    0,    0,   93,    0,    0,   54,   95,    0,
       99,    0,    0,   99,   90,    0,   64,   63,   88,   88,
       88,   88,   88,   88,   23,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   82,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       18,   88,   88,   88,   88,   88,   88,   88,    0,    0,

        0,    0,    0,   98,   98,    0,   97,    0,   97,    0,
       92,   88,   88,   88,   88,   88,   88,   86,   88,   85,
       88,   88,   88,   11,   88,   88,   88,   88,   80,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   87,   88,    0,    0,
        0,    0,    0,   96,   96,   91,   88,   88,   88,   88,
       88,   88,   17,    2,    8,   88,   88,   83,   88,   88,
       88,   88,   88,   88,   88,   88,   81,   88,   88,   88,
       88,   16,   88,   88,    4,   88,   21,   88,   88,   88,
       88,   88,   88,   88,   88,   84,   22,   13,   31,   88,

       88,   88,   88,   88,    5,   79,    9,    3,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   35,
       32,   88,   88,    7,   88,   88,   12,   88,   88,   10,
       88,   33,   27,   88,   88,   88,   88,   14,   88,   15,
       20,   78,   34,   28,   88,   88,   88,   19,    6,   24,
       88,   88,   25,   26,   88,   30,   88,   29,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   21,
       22,   20,   20,   20,   20,   23,   23,   24,   25,   26,
       27,   28,   29,    1,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   39,   49,   50,   51,   39,   39,
       52,   53,   54,   55,   56,    1,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   39,   39,   66,   67,   68,
       69,   70,   39,   71,   72,   73,   74,   75,   76,   77,
       78,   39,   79,   80,   81,   82,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[83] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
        4,    1,    1,    1,    1,    1,    1,    1,    1,    5,
        5,    5,    6,    1,    1,    1,    1,    1,    3,    6,
        6,    6,    6,    6,    6,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    1,    3,    1,    1,    7,    5,    5,    6,    6,
        6,    5,    7,    7,    7,    7,    7,    8,    7,    7,
        8,    7,    8,    7,    8,    7,    8,    7,    1,    1,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[374] =
    {   0,
        0,    0,   80,   82,   85,   95,   88,  102,  296, 1896,
      105, 1896,  263,   86,   90,  262,   91,  235, 1896, 1896,
      223,  221, 1896,   84,  229,   94,  102,  221, 1896,  100,
      217,  101,  110,  147,  114,  120,  151, 1896, 1896, 1896,
      157,  162,  166,  173,  177,  181,  185,  189,  194,  198,
      205,  232,  244,  248,  253,  257,  261, 1896,  163, 1896,
     1896, 1896, 1896, 1896,  217, 1896,  227, 1896,  209,  219,
      156,  236, 1896,  108, 1896,  239, 1896, 1896, 1896, 1896,
       92,  265, 1896, 1896, 1896,  145,  135, 1896,  317, 1896,
      271,  277, 1896,  125, 1896, 1896, 1896,  119,    0,  283,

      110,   91,  315,  288,  326,  334,  341,  349,  356,  360,
      364,  369,  373,  377,  381,  385,  390,  407,  414,  422,
      426,  440,  444,  448,  453,  461,  471,  475,  480,  498,
      502,  506,  516,  520,  528,  532, 1896, 1896, 1896, 1896,
     1896, 1896,  432,    0, 1896,  550,    0, 1896, 1896,  530,
     1896,  574,  579,  584,  569,  603, 1896, 1896,  611,  615,
      619,  623,  627,  631,  640,  650,  654,  660,  668,  672,
      676,  680,  684,  689,  697,  701,  705,  715,  728,  732,
      739,  747,  751,  759,  766,  774,  778,  782,  791,  786,
      795,  806,  810,  818,  823,  827,  837,  842,  770,  894,

      855,  946,  868, 1896,  878,  906, 1896,  957,  967,  864,
      915,  922,  942,  991,  951,  995,  999, 1003, 1009, 1013,
     1017, 1021, 1029, 1033, 1037, 1041, 1047, 1054, 1058, 1062,
     1070, 1076, 1080, 1084, 1089, 1096, 1103, 1107, 1118, 1126,
     1130, 1135, 1139, 1145, 1153, 1158, 1162, 1166,  112,    0,
      180,    0, 1187, 1896, 1191, 1176, 1189, 1215, 1220, 1224,
     1228, 1243, 1249, 1253, 1257, 1265, 1269, 1273, 1278, 1282,
     1286, 1290, 1296, 1300, 1307, 1311, 1319, 1324, 1328, 1333,
     1341, 1354, 1358, 1368, 1372, 1379, 1387, 1391, 1395, 1400,
     1406, 1412, 1416, 1420, 1434, 1441, 1449, 1453, 1457, 1461,

     1466, 1470, 1479, 1483, 1487, 1491, 1495, 1504, 1508, 1512,
     1521, 1525, 1529, 1537, 1541, 1545, 1550, 1555, 1578, 1562,
     1569, 1584, 1593, 1597, 1601, 1605, 1609, 1613, 1617, 1624,
     1628, 1632, 1636, 1647, 1658, 1662, 1675, 1679, 1683, 1687,
     1691, 1695, 1699, 1703, 1707, 1711, 1718, 1726, 1730, 1739,
     1743, 1747,    0,    0, 1751, 1756, 1760, 1764, 1896, 1807,
     1815, 1823, 1831, 1835, 1841, 1847, 1855, 1859, 1863, 1865,
     1871, 1879, 1887
    } ;

static yyconst flex_int16_t yy_def[374] =
    {   0,
      359,    1,  360,  360,  361,  361,  360,  360,  359,  359,
      359,  359,  359,  362,  359,  359,  359,  363,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  364,  364,  364,  364,  364,  359,  359,  359,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  362,  359,  365,  359,  359,  359,  359,
      363,  366,  359,  359,  359,  359,  359,  359,  367,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  368,  364,

      362,  363,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  359,  359,  359,  359,
      359,  359,  362,  369,  359,  363,  370,  359,  359,  367,
      359,  371,  372,  367,  359,  359,  359,  359,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  362,  362,

      363,  363,  371,  359,  371,  372,  359,  373,  372,  359,
      359,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  362,  200,
      363,  202,  373,  359,  373,  359,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,

      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  368,  368,  364,  364,  364,  364,    0,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359
    } ;

static yyconst flex_int16_t yy_nxt[1979] =
    {   0,
       10,   11,   12,   11,   11,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       27,   27,   27,   28,   29,   30,   31,   32,   10,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   34,
       35,   33,   33,   33,   36,   37,   33,   33,   33,   33,
       33,   38,   10,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   33,   33,   48,   49,   50,   51,   52,   53,
       33,   54,   55,   56,   57,   33,   33,   33,   58,   59,
       60,   61,   63,   64,   63,   64,   67,   68,   67,   67,
       63,   64,   75,   65,   77,   65,   67,   68,   67,   67,

       79,   71,  145,   69,   63,   64,   72,   88,   72,   72,
       85,   86,   89,   69,   75,   71,   75,   80,   75,   91,
       90,   92,   92,   92,   92,   94,   95,   97,   98,   99,
       99,   99,   99,   99,   99,   99,   99,   70,   76,   99,
       99,   99,   99,   82,   82,  158,   77,   70,   77,   77,
       77,  157,  149,  101,   77,   77,   77,  102,  148,   77,
       76,   77,   76,   77,   76,   77,   99,   99,   99,   99,
       99,   99,   99,   99,  142,  104,   99,   99,   99,   99,
      105,   99,   99,   99,   99,   99,   99,   99,   99,  137,
      145,  103,   99,   99,   99,   99,   99,   99,   99,   99,

       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,  106,   99,   99,   99,   99,   99,   99,   99,
       99,  141,  140,  107,   99,   99,   99,   99,   72,  110,
       72,   72,   82,  108,  109,  139,  111,   72,  112,   72,
       72,  113,  138,   96,   93,  114,   87,   84,  115,   83,
      117,   99,   99,   99,   99,  118,  119,  116,  143,  143,
      143,  122,  120,   99,   99,   99,   99,   99,   99,   99,
       99,  121,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,  146,  146,  146,   82,   78,   73,
      155,  155,  155,  155,   91,  359,   92,   92,   92,   92,

      359,  123,   99,   99,   99,   99,  359,   99,   99,   99,
       99,  126,  127,  129,  124,  144,  130,  125,  359,  151,
      128,  160,  152,  131,  133,  135,  359,  359,  134,  136,
      132,  156,  359,  359,   99,   99,   99,   99,  359,  359,
      153,  147,  154,  359,  154,   99,   99,   99,   99,  359,
      154,  154,  159,   99,   99,   99,   99,  359,  359,  154,
       99,   99,   99,   99,  162,  359,  359,  163,   99,   99,
       99,   99,  359,  359,  161,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,  359,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,

       99,   99,   99,   99,   99,   99,   99,   99,  359,   99,
       99,   99,   99,  359,  359,  165,  359,  164,  359,  359,
      168,  359,  359,  359,  166,  169,   99,   99,   99,   99,
      359,  359,  167,   99,   99,   99,   99,  359,   75,  359,
      170,   99,   99,   99,   99,   99,   99,   99,   99,  359,
      171,  199,  199,  199,  172,  359,  359,  173,  174,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,  175,   99,   99,   99,   99,  359,  359,  359,  176,
       99,   99,   99,   99,   76,  359,  177,  359,  359,  178,
       99,   99,   99,   99,   99,   99,   99,   99,  179,   99,

       99,   99,   99,  359,  181,  359,  180,  359,  359,  359,
      184,  359,  182,  359,  359,  359,  183,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,  185,
      359,  187,  151,  186,  359,   99,   99,   99,   99,   99,
       99,   99,   99,  359,  359,  188,  189,   99,   99,   99,
       99,   99,   99,   99,   99,  154,  359,  154,  359,  359,
      145,  359,  359,  154,  154,  359,  359,  359,  190,  201,
      201,  201,  154,  359,  359,  192,  204,  359,  359,  191,
      193,  207,  359,  359,  195,  359,  151,  194,  155,  155,
      155,  155,  359,  359,  359,  208,  197,  198,  196,  205,

      359,  205,   82,  359,  209,  359,  209,  205,  205,  154,
      359,  154,  209,  209,  359,  359,  205,  154,  154,  210,
      359,  209,  211,  211,  211,  211,  154,  359,  359,  156,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,  359,  359,  215,  359,  214,   99,
       99,   99,   99,  359,  359,  213,  359,  359,  216,   99,
       99,   99,   99,   99,   99,   99,   99,  359,  212,   99,
       99,   99,   99,  359,  359,  359,  217,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,

       99,   99,   99,   99,   99,   99,   99,  359,   99,   99,
       99,   99,  219,  359,  359,  218,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,  359,  359,
      220,  359,  359,  223,   99,   99,   99,   99,  359,  221,
      359,  359,  359,  222,  225,  226,  224,   99,   99,   99,
       99,   99,   99,   99,   99,  359,  359,  227,   99,   99,
       99,   99,  359,  359,  359,  228,   99,   99,   99,   99,
       99,   99,   99,   99,  359,  359,   75,  229,   99,   99,
       99,   99,  359,  359,  230,   99,   99,   99,   99,  249,
      249,  249,  231,   99,   99,   99,   99,   99,   99,   99,

       99,   99,   99,   99,   99,   99,   99,   99,   99,  232,
       99,   99,   99,   99,   99,   99,   99,   99,  359,  359,
      359,  233,   76,  234,  235,   99,   99,   99,   99,   99,
       99,   99,   99,  359,  359,  359,  236,   99,   99,   99,
       99,  237,   99,   99,   99,   99,   99,   99,   99,   99,
      238,  359,  359,  359,  241,  239,   99,   99,   99,   99,
      240,   99,   99,   99,   99,  145,  242,  359,  359,  359,
      204,  359,  359,  359,  251,  251,  251,  359,  243,  359,
      204,  359,  244,  256,  256,  256,  256,  359,  359,  359,
      245,  359,  359,  205,  359,  205,  247,  359,  248,  246,

       75,  205,  205,  205,  359,  205,  359,   82,  207,  359,
      205,  205,  205,  250,  250,  250,  250,  359,  359,  359,
      205,  359,  359,  250,  250,  250,  250,  250,  250,  359,
      359,  209,  359,  209,  211,  211,  211,  211,  359,  209,
      209,   99,   99,   99,   99,  359,   76,  359,  209,  359,
      250,  250,  250,  250,  250,  250,  145,  359,  359,  254,
      359,   99,   99,   99,   99,  252,  252,  252,  252,  207,
       99,   99,   99,   99,  359,  252,  252,  252,  252,  252,
      252,  359,  255,  359,  255,  258,  260,  257,  359,  359,
      255,  255,  209,  359,  209,  359,  359,  359,   82,  255,

      209,  209,  252,  252,  252,  252,  252,  252,  359,  209,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,  359,  261,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,  359,  359,  259,  359,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,  359,  262,   99,   99,   99,   99,
      359,  359,  263,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,  359,  359,  359,  264,   99,
       99,   99,   99,  265,  266,   99,   99,   99,   99,   99,

       99,   99,   99,   99,   99,   99,   99,  267,   99,   99,
       99,   99,  359,  268,  269,   99,   99,   99,   99,  271,
      359,  270,   99,   99,   99,   99,   99,   99,   99,   99,
      359,  359,  273,  359,  359,  359,  274,   99,   99,   99,
       99,  272,  359,  359,  275,   99,   99,   99,   99,   99,
       99,   99,   99,  276,   99,   99,   99,   99,   99,   99,
       99,   99,  359,  278,   99,   99,   99,   99,  277,  359,
      359,  279,   99,   99,   99,   99,  280,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,  254,
      359,  281,  359,  254,  283,  256,  256,  256,  256,  359,

      359,  359,  284,  359,  359,  282,  285,  286,   99,   99,
       99,   99,  255,  359,  255,  287,  255,  359,  255,  359,
      255,  255,  359,  359,  255,  255,  359,  359,  359,  255,
      359,  288,  359,  255,   99,   99,   99,   99,  289,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,  359,  359,  290,  359,  359,  359,  291,  359,  359,
      359,  293,   99,   99,   99,   99,  359,  292,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
      359,  359,  359,  294,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,  359,   99,   99,   99,

       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,  359,  295,   99,   99,   99,   99,   99,
       99,   99,   99,  359,  359,  296,   99,   99,   99,   99,
       99,   99,   99,   99,  359,  359,  297,  298,   99,   99,
       99,   99,  299,   99,   99,   99,   99,   99,   99,   99,
       99,  300,   99,   99,   99,   99,  359,  359,  359,  301,
       99,   99,   99,   99,  359,  304,  359,  359,  302,  305,
      359,  359,  303,   99,   99,   99,   99,   99,   99,   99,
       99,  359,  359,  306,  359,  359,  307,   99,   99,   99,
       99,   99,   99,   99,   99,  359,  359,  309,   99,   99,

       99,   99,  359,  359,  359,  308,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,  310,   99,
       99,   99,   99,  359,  311,   99,   99,   99,   99,  359,
      359,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,  359,  359,  359,  312,  313,  317,  359,
      359,  316,  319,   99,   99,   99,   99,  318,  359,  314,
       99,   99,   99,   99,  359,  359,  359,  315,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,  359,   99,   99,   99,   99,   99,
       99,   99,   99,  359,  359,  359,  320,  359,   99,   99,

       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,  359,  359,
      359,  321,  322,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,  359,  359,  359,  323,  324,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,  359,  359,  359,  325,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,  359,   99,
       99,   99,   99,  327,   99,   99,   99,   99,  359,  359,
      326,   99,   99,   99,   99,  329,  359,  328,   99,   99,
       99,   99,  333,  359,  330,  334,  359,   99,   99,   99,

       99,  332,  331,   99,   99,   99,   99,  359,  359,  359,
      335,  336,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
      359,  359,  337,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,  359,
      359,  339,  359,  338,  359,  340,   99,   99,   99,   99,
      359,  359,  344,  341,  359,  359,  342,   99,   99,   99,
       99,   99,   99,   99,   99,  359,  359,  359,  343,  345,
      346,  359,  359,  347,   99,   99,   99,   99,   99,   99,

       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,  359,  348,  359,   99,   99,   99,
       99,  359,  349,  359,  351,   99,   99,   99,   99,   99,
       99,   99,   99,  359,  359,  359,  350,  352,   99,  353,
      354,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,  355,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,  359,  359,  359,
      357,  359,  359,  356,  359,  359,  359,  359,  359,  359,

      359,  359,  359,  359,  359,  359,  358,   62,   62,   62,
       62,   62,   62,   62,   62,   66,   66,   66,   66,   66,
       66,   66,   66,   74,  359,   74,   74,   74,   74,   74,
       74,   81,  359,   81,  359,   81,   81,   81,   81,  100,
      100,  100,  100,   74,   74,   74,  359,  359,   74,   81,
       81,   81,  359,  359,   81,  150,  150,  150,  150,  150,
      150,  150,  150,   99,   99,   99,   99,  200,  200,  202,
      202,  203,  203,  203,  203,  203,  203,  203,  203,  206,
      206,  206,  206,  206,  206,  206,  206,  253,  253,  253,
      253,  253,  253,  253,  253,    9,  359,  359,  359,  359,

      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359
    } ;

static yyconst flex_int16_t yy_chk[1979] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    4,    4,    5,    5,    5,    5,
        7,    7,   14,    3,   15,    4,    6,    6,    6,    6,

       17,    7,   81,    5,    8,    8,   11,   26,   11,   11,
       24,   24,   26,    6,   74,    8,  101,   17,  249,   27,
       26,   27,   27,   27,   27,   30,   30,   32,   32,   33,
       33,   33,   33,   35,   35,   35,   35,    5,   14,   36,
       36,   36,   36,  102,   81,   98,   15,    6,   15,   15,
       15,   94,   87,   34,   15,   15,   15,   34,   86,   15,
       74,   15,  101,   15,  249,   15,   34,   34,   34,   34,
       37,   37,   37,   37,   71,   36,   41,   41,   41,   41,
       37,   42,   42,   42,   42,   43,   43,   43,   43,   59,
      251,   35,   44,   44,   44,   44,   45,   45,   45,   45,

       46,   46,   46,   46,   47,   47,   47,   47,   48,   48,
       48,   48,   41,   49,   49,   49,   49,   50,   50,   50,
       50,   70,   69,   42,   51,   51,   51,   51,   67,   44,
       67,   67,  251,   42,   43,   65,   44,   72,   44,   72,
       72,   44,   59,   31,   28,   45,   25,   22,   46,   21,
       47,   52,   52,   52,   52,   47,   48,   46,   76,   76,
       76,   51,   49,   53,   53,   53,   53,   54,   54,   54,
       54,   50,   55,   55,   55,   55,   56,   56,   56,   56,
       57,   57,   57,   57,   82,   82,   82,   18,   16,   13,
       91,   91,   91,   91,   92,    9,   92,   92,   92,   92,

        0,   52,  100,  100,  100,  100,    0,  104,  104,  104,
      104,   54,   54,   55,   53,   76,   55,   53,    0,   89,
       54,  104,   89,   55,   56,   57,    0,    0,   56,   57,
       55,   91,    0,    0,  103,  103,  103,  103,    0,    0,
       89,   82,   89,    0,   89,  105,  105,  105,  105,    0,
       89,   89,  103,  106,  106,  106,  106,    0,    0,   89,
      107,  107,  107,  107,  106,    0,    0,  106,  108,  108,
      108,  108,    0,    0,  105,  109,  109,  109,  109,  110,
      110,  110,  110,  111,  111,  111,  111,    0,  112,  112,
      112,  112,  113,  113,  113,  113,  114,  114,  114,  114,

      115,  115,  115,  115,  116,  116,  116,  116,    0,  117,
      117,  117,  117,    0,    0,  108,    0,  107,    0,    0,
      111,    0,    0,    0,  109,  112,  118,  118,  118,  118,
        0,    0,  110,  119,  119,  119,  119,    0,  143,    0,
      113,  120,  120,  120,  120,  121,  121,  121,  121,    0,
      114,  143,  143,  143,  115,    0,    0,  116,  117,  122,
      122,  122,  122,  123,  123,  123,  123,  124,  124,  124,
      124,  118,  125,  125,  125,  125,    0,    0,    0,  119,
      126,  126,  126,  126,  143,    0,  119,    0,    0,  120,
      127,  127,  127,  127,  128,  128,  128,  128,  121,  129,

      129,  129,  129,    0,  123,    0,  122,    0,    0,    0,
      125,    0,  124,    0,    0,    0,  124,  130,  130,  130,
      130,  131,  131,  131,  131,  132,  132,  132,  132,  126,
        0,  128,  150,  127,    0,  133,  133,  133,  133,  134,
      134,  134,  134,    0,    0,  128,  129,  135,  135,  135,
      135,  136,  136,  136,  136,  150,    0,  150,    0,    0,
      146,    0,    0,  150,  150,    0,    0,    0,  130,  146,
      146,  146,  150,    0,    0,  132,  152,    0,    0,  131,
      133,  153,    0,    0,  134,    0,  154,  133,  155,  155,
      155,  155,    0,    0,    0,  153,  136,  136,  135,  152,

        0,  152,  146,    0,  153,    0,  153,  152,  152,  154,
        0,  154,  153,  153,    0,    0,  152,  154,  154,  156,
        0,  153,  156,  156,  156,  156,  154,    0,    0,  155,
      159,  159,  159,  159,  160,  160,  160,  160,  161,  161,
      161,  161,  162,  162,  162,  162,  163,  163,  163,  163,
      164,  164,  164,  164,    0,    0,  162,    0,  161,  165,
      165,  165,  165,    0,    0,  160,    0,    0,  163,  166,
      166,  166,  166,  167,  167,  167,  167,    0,  159,  168,
      168,  168,  168,    0,    0,    0,  164,  169,  169,  169,
      169,  170,  170,  170,  170,  171,  171,  171,  171,  172,

      172,  172,  172,  173,  173,  173,  173,    0,  174,  174,
      174,  174,  167,    0,    0,  166,  175,  175,  175,  175,
      176,  176,  176,  176,  177,  177,  177,  177,    0,    0,
      168,    0,    0,  171,  178,  178,  178,  178,    0,  169,
        0,    0,    0,  170,  173,  174,  172,  179,  179,  179,
      179,  180,  180,  180,  180,    0,    0,  175,  181,  181,
      181,  181,    0,    0,    0,  176,  182,  182,  182,  182,
      183,  183,  183,  183,    0,    0,  199,  178,  184,  184,
      184,  184,    0,    0,  179,  185,  185,  185,  185,  199,
      199,  199,  180,  186,  186,  186,  186,  187,  187,  187,

      187,  188,  188,  188,  188,  190,  190,  190,  190,  181,
      189,  189,  189,  189,  191,  191,  191,  191,    0,    0,
        0,  182,  199,  183,  184,  192,  192,  192,  192,  193,
      193,  193,  193,    0,    0,    0,  185,  194,  194,  194,
      194,  186,  195,  195,  195,  195,  196,  196,  196,  196,
      187,    0,    0,    0,  190,  188,  197,  197,  197,  197,
      189,  198,  198,  198,  198,  201,  192,    0,    0,    0,
      203,    0,    0,    0,  201,  201,  201,    0,  193,    0,
      205,    0,  194,  210,  210,  210,  210,    0,    0,    0,
      195,    0,    0,  203,    0,  203,  197,    0,  198,  196,

      200,  203,  203,  205,    0,  205,    0,  201,  206,    0,
      203,  205,  205,  200,  200,  200,  200,    0,    0,    0,
      205,    0,    0,  200,  200,  200,  200,  200,  200,    0,
        0,  206,    0,  206,  211,  211,  211,  211,    0,  206,
      206,  212,  212,  212,  212,    0,  200,    0,  206,    0,
      200,  200,  200,  200,  200,  200,  202,    0,    0,  208,
        0,  213,  213,  213,  213,  202,  202,  202,  202,  209,
      215,  215,  215,  215,    0,  202,  202,  202,  202,  202,
      202,    0,  208,    0,  208,  213,  215,  212,    0,    0,
      208,  208,  209,    0,  209,    0,    0,    0,  202,  208,

      209,  209,  202,  202,  202,  202,  202,  202,    0,  209,
      214,  214,  214,  214,  216,  216,  216,  216,  217,  217,
      217,  217,  218,  218,  218,  218,    0,  216,  219,  219,
      219,  219,  220,  220,  220,  220,  221,  221,  221,  221,
      222,  222,  222,  222,    0,    0,  214,    0,  223,  223,
      223,  223,  224,  224,  224,  224,  225,  225,  225,  225,
      226,  226,  226,  226,    0,  217,  227,  227,  227,  227,
        0,    0,  219,  228,  228,  228,  228,  229,  229,  229,
      229,  230,  230,  230,  230,    0,    0,    0,  221,  231,
      231,  231,  231,  222,  223,  232,  232,  232,  232,  233,

      233,  233,  233,  234,  234,  234,  234,  225,  235,  235,
      235,  235,    0,  226,  227,  236,  236,  236,  236,  230,
        0,  228,  237,  237,  237,  237,  238,  238,  238,  238,
        0,    0,  232,    0,    0,    0,  233,  239,  239,  239,
      239,  231,    0,    0,  234,  240,  240,  240,  240,  241,
      241,  241,  241,  235,  242,  242,  242,  242,  243,  243,
      243,  243,    0,  237,  244,  244,  244,  244,  236,    0,
        0,  238,  245,  245,  245,  245,  239,  246,  246,  246,
      246,  247,  247,  247,  247,  248,  248,  248,  248,  253,
        0,  240,    0,  255,  242,  256,  256,  256,  256,    0,

        0,    0,  242,    0,    0,  241,  243,  244,  257,  257,
      257,  257,  253,    0,  253,  245,  255,    0,  255,    0,
      253,  253,    0,    0,  255,  255,    0,    0,    0,  253,
        0,  246,    0,  255,  258,  258,  258,  258,  248,  259,
      259,  259,  259,  260,  260,  260,  260,  261,  261,  261,
      261,    0,    0,  257,    0,    0,    0,  258,    0,    0,
        0,  260,  262,  262,  262,  262,    0,  259,  263,  263,
      263,  263,  264,  264,  264,  264,  265,  265,  265,  265,
        0,    0,    0,  261,  266,  266,  266,  266,  267,  267,
      267,  267,  268,  268,  268,  268,    0,  269,  269,  269,

      269,  270,  270,  270,  270,  271,  271,  271,  271,  272,
      272,  272,  272,    0,  262,  273,  273,  273,  273,  274,
      274,  274,  274,    0,    0,  266,  275,  275,  275,  275,
      276,  276,  276,  276,    0,    0,  267,  269,  277,  277,
      277,  277,  270,  278,  278,  278,  278,  279,  279,  279,
      279,  271,  280,  280,  280,  280,    0,    0,    0,  272,
      281,  281,  281,  281,    0,  275,    0,    0,  273,  276,
        0,    0,  274,  282,  282,  282,  282,  283,  283,  283,
      283,    0,    0,  278,    0,    0,  279,  284,  284,  284,
      284,  285,  285,  285,  285,    0,    0,  281,  286,  286,

      286,  286,    0,    0,    0,  280,  287,  287,  287,  287,
      288,  288,  288,  288,  289,  289,  289,  289,  283,  290,
      290,  290,  290,    0,  284,  291,  291,  291,  291,    0,
        0,  292,  292,  292,  292,  293,  293,  293,  293,  294,
      294,  294,  294,    0,    0,    0,  286,  288,  292,    0,
        0,  291,  294,  295,  295,  295,  295,  293,    0,  289,
      296,  296,  296,  296,    0,    0,    0,  290,  297,  297,
      297,  297,  298,  298,  298,  298,  299,  299,  299,  299,
      300,  300,  300,  300,    0,  301,  301,  301,  301,  302,
      302,  302,  302,    0,    0,    0,  295,    0,  303,  303,

      303,  303,  304,  304,  304,  304,  305,  305,  305,  305,
      306,  306,  306,  306,  307,  307,  307,  307,    0,    0,
        0,  300,  301,  308,  308,  308,  308,  309,  309,  309,
      309,  310,  310,  310,  310,    0,    0,    0,  302,  303,
      311,  311,  311,  311,  312,  312,  312,  312,  313,  313,
      313,  313,    0,    0,    0,  304,  314,  314,  314,  314,
      315,  315,  315,  315,  316,  316,  316,  316,    0,  317,
      317,  317,  317,  310,  318,  318,  318,  318,    0,    0,
      309,  320,  320,  320,  320,  312,    0,  311,  321,  321,
      321,  321,  316,    0,  313,  317,    0,  319,  319,  319,

      319,  315,  314,  322,  322,  322,  322,    0,    0,    0,
      318,  319,  323,  323,  323,  323,  324,  324,  324,  324,
      325,  325,  325,  325,  326,  326,  326,  326,  327,  327,
      327,  327,  328,  328,  328,  328,  329,  329,  329,  329,
        0,    0,  322,  330,  330,  330,  330,  331,  331,  331,
      331,  332,  332,  332,  332,  333,  333,  333,  333,    0,
        0,  325,    0,  323,    0,  326,  334,  334,  334,  334,
        0,    0,  333,  328,    0,    0,  329,  335,  335,  335,
      335,  336,  336,  336,  336,    0,    0,    0,  331,  334,
      335,    0,    0,  336,  337,  337,  337,  337,  338,  338,

      338,  338,  339,  339,  339,  339,  340,  340,  340,  340,
      341,  341,  341,  341,  342,  342,  342,  342,  343,  343,
      343,  343,  344,  344,  344,  344,  345,  345,  345,  345,
      346,  346,  346,  346,    0,  337,    0,  347,  347,  347,
      347,    0,  339,    0,  346,  348,  348,  348,  348,  349,
      349,  349,  349,    0,    0,    0,  345,  347,  350,  350,
      350,  350,  351,  351,  351,  351,  352,  352,  352,  352,
      355,  355,  355,  355,  351,  356,  356,  356,  356,  357,
      357,  357,  357,  358,  358,  358,  358,    0,    0,    0,
      355,    0,    0,  352,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  357,  360,  360,  360,
      360,  360,  360,  360,  360,  361,  361,  361,  361,  361,
      361,  361,  361,  362,    0,  362,  362,  362,  362,  362,
      362,  363,    0,  363,    0,  363,  363,  363,  363,  364,
      364,  364,  364,  365,  365,  365,    0,    0,  365,  366,
      366,  366,    0,    0,  366,  367,  367,  367,  367,  367,
      367,  367,  367,  368,  368,  368,  368,  369,  369,  370,
      370,  371,  371,  371,  371,  371,  371,  371,  371,  372,
      372,  372,  372,  372,  372,  372,  372,  373,  373,  373,
      373,  373,  373,  373,  373,  359,  359,  359,  359,  359,

      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[113] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 
    0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "tokenizer.l"

#line 5 "tokenizer.l"

  class MyLexer : public yyFlexLexer
  {
    public:
     //  char *gettext() { return yytext; };
  };

  #include "Ravl/Stream.hh"
  #include "Ravl/CxxDoc/Object.hh"
  #include "Ravl/CxxDoc/Strings.hh"
   
  #define YYSTYPE RavlCxxDocN::ObjectC

  #include <stdlib.h>
  #include "cxx.tab.h"

#if RAVL_VISUALCPP_NAMESPACE_BUG  
  using RavlN::StringC;
#endif

  using namespace RavlN;

  namespace RavlCxxDocN {
    ObjectC hookCommentObj;
  };
  

  extern RavlCxxDocN::ObjectC yylval;
  
  RavlCxxDocN::CommentInfoC comment;
  RavlCxxDocN::CommentInfoC commentLast;
  
  inline void CommentUpdate(RavlCxxDocN::ObjectC &obj,bool setSymb = true,int alineno = 0) 
   {
     if(setSymb)
       obj = RavlCxxDocN::ObjectC(true);
     obj.StartLineno() = alineno;
     obj.EndLineno() = alineno;
     commentLast = comment;
     obj.SetComment(comment);
     comment.Reset();
  }

  inline void CommentUpdate(RavlCxxDocN::ObjectC &obj,const char *name,int alineno = 0) 
   {
     obj = RavlCxxDocN::ObjectC(name);
     obj.StartLineno() = alineno;
     obj.EndLineno() = alineno;
     commentLast = comment;
     obj.SetComment(comment);
     comment.Reset();
  }

  inline void CommentUpdate(RavlCxxDocN::ObjectC &obj,const StringC &name,int alineno = 0) 
   {
     obj = RavlCxxDocN::ObjectC(name);
     obj.StartLineno() = alineno;
     obj.EndLineno() = alineno;
     commentLast = comment;
     obj.SetComment(comment);
     comment.Reset();
  }


#line 1048 "tokenizer.yy.cc"

#define INITIAL 0
#define COMMENT 1
#define PREPARSER 2
#define PPCOMMENT 3

/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
#line 91 "tokenizer.l"

    /*==============> Strip whitespace <==============*/
#line 1152 "tokenizer.yy.cc"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 360 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1896 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_more_len); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 93 "tokenizer.l"
{}
	YY_BREAK
/*==============> Special keyword <==============*/
case 2:
YY_RULE_SETUP
#line 97 "tokenizer.l"
{ CommentUpdate(yylval,STR(class) ,yylineno); return SCSPEC; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 98 "tokenizer.l"
{ CommentUpdate(yylval,STR(struct),yylineno); return SCSPEC; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 99 "tokenizer.l"
{ CommentUpdate(yylval,STR(union) ,yylineno); return SCSPEC; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 101 "tokenizer.l"
{ CommentUpdate(yylval,STR(public)   ,yylineno); return PUBLIC;     }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 102 "tokenizer.l"
{ CommentUpdate(yylval,STR(protected),yylineno); return PROTECTED;  }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 103 "tokenizer.l"
{ CommentUpdate(yylval,STR(private)  ,yylineno); return PRIVATE;    }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 104 "tokenizer.l"
{ CommentUpdate(yylval,STR(const)    ,yylineno); return CV_QUALIFIER;  }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 105 "tokenizer.l"
{ CommentUpdate(yylval,STR(static)    ,yylineno); return CV_QUALIFIER;  }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 106 "tokenizer.l"
{ CommentUpdate(yylval,STR(virtual)  ,yylineno); return CPVIRTUAL;  }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 108 "tokenizer.l"
{ CommentUpdate(yylval,STR(enum)     ,yylineno); return ENUM;     }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 109 "tokenizer.l"
{ CommentUpdate(yylval,STR(typedef)  ,yylineno); return CPTYPEDEF;  }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 110 "tokenizer.l"
{ CommentUpdate(yylval,STR(friend)   ,yylineno); return CPFRIEND;   }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 111 "tokenizer.l"
{ CommentUpdate(yylval,STR(operator) ,yylineno); return CPOPERATOR; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 112 "tokenizer.l"
{ CommentUpdate(yylval,STR(template) ,yylineno); return TEMPLATE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 113 "tokenizer.l"
{ CommentUpdate(yylval,STR(throw)    ,yylineno); return CPTHROW;    }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 114 "tokenizer.l"
{ CommentUpdate(yylval,STR(throw)    ,yylineno); return CPCATCH;    }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 115 "tokenizer.l"
{ CommentUpdate(yylval,STR(throw)    ,yylineno); return CPTRY;    }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 116 "tokenizer.l"
{ CommentUpdate(yylval,STR(namespace),yylineno); return NAMESPACE;  }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 117 "tokenizer.l"
{ CommentUpdate(yylval,STR(typename) ,yylineno); return TYPENAME_KEYWORD; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 118 "tokenizer.l"
{ CommentUpdate(yylval,STR(using)    ,yylineno); return USING;    }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 119 "tokenizer.l"
{ CommentUpdate(yylval,STR(extern)   ,yylineno); return EXTERN;   }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 120 "tokenizer.l"
{ CommentUpdate(yylval,STR(asm)      ,yylineno); return ASM_KEYWORD;   }
	YY_BREAK
/* ==== Cheat and pick up some compatility macro's ==== */
case 24:
YY_RULE_SETUP
#line 124 "tokenizer.l"
{ CommentUpdate(yylval,yytext,yylineno); return CPTHROW;    }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 125 "tokenizer.l"
{ CommentUpdate(yylval,yytext,yylineno); return CPTHROW;    }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 126 "tokenizer.l"
{ CommentUpdate(yylval,yytext,yylineno); return CPTHROW;    }
	YY_BREAK
/*==============> Ignored stuff <==============*/
case 27:
YY_RULE_SETUP
#line 130 "tokenizer.l"
{}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 131 "tokenizer.l"
{}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 132 "tokenizer.l"
{}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 133 "tokenizer.l"
{}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 134 "tokenizer.l"
{}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 135 "tokenizer.l"
{}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 136 "tokenizer.l"
{} /* Temp fix until eliminated. */
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 137 "tokenizer.l"
{}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 138 "tokenizer.l"
{}
	YY_BREAK
/*==============> Normal operators <==============*/
case 36:
YY_RULE_SETUP
#line 142 "tokenizer.l"
{ CommentUpdate(yylval,RavlCxxDocN::strp_Colon     ,yylineno); return ':';}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 143 "tokenizer.l"
{ CommentUpdate(yylval,RavlCxxDocN::strp_ColonColon,yylineno); return CLCL;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 144 "tokenizer.l"
{ CommentUpdate(yylval,RavlCxxDocN::strp_Tilda     ,yylineno); return '~'; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 145 "tokenizer.l"
{ return '='; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 146 "tokenizer.l"
{ return '<'; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 147 "tokenizer.l"
{ return '>'; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 148 "tokenizer.l"
{ return '&'; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 149 "tokenizer.l"
{ return '+'; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 150 "tokenizer.l"
{ return '-'; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 151 "tokenizer.l"
{ return '*'; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 152 "tokenizer.l"
{ return '/'; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 153 "tokenizer.l"
{ return '%'; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 154 "tokenizer.l"
{ return '|'; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 155 "tokenizer.l"
{ return '^'; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 156 "tokenizer.l"
{ return '!'; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 157 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 158 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 159 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 160 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 161 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 162 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 163 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 164 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 165 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 166 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 167 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 168 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 169 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 170 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 171 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 172 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 173 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 174 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 175 "tokenizer.l"
{ yylval = StringC(yytext); return BINOP; }
	YY_BREAK
/*==============> End of Phrase <==============*/
case 70:
YY_RULE_SETUP
#line 178 "tokenizer.l"
{ CommentUpdate(yylval,true,yylineno);  return ';'; }
	YY_BREAK
/*==============> Comma <==============*/
case 71:
YY_RULE_SETUP
#line 181 "tokenizer.l"
{ return ','; }
	YY_BREAK
/*==============> Paranthesis <==============*/
case 72:
YY_RULE_SETUP
#line 184 "tokenizer.l"
{ return '('; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 185 "tokenizer.l"
{ return ')'; }
	YY_BREAK
/*==============> Brackets <==============*/
case 74:
YY_RULE_SETUP
#line 188 "tokenizer.l"
{ CommentUpdate(yylval,true,yylineno); return '{'; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 189 "tokenizer.l"
{ CommentUpdate(yylval,true,yylineno); return '}'; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 190 "tokenizer.l"
{ return '['; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 191 "tokenizer.l"
{ return ']'; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 193 "tokenizer.l"
{ CommentUpdate(yylval,STR(unsigned),yylineno); return TYPEQUAL; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 194 "tokenizer.l"
{ CommentUpdate(yylval,STR(signed)  ,yylineno); return TYPEQUAL; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 195 "tokenizer.l"
{ CommentUpdate(yylval,STR(long)    ,yylineno); return TYPEQUAL; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 196 "tokenizer.l"
{ CommentUpdate(yylval,STR(short)   ,yylineno); return TYPEQUAL; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 197 "tokenizer.l"
{ CommentUpdate(yylval,STR(int)     ,yylineno); return BUILTIN; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 198 "tokenizer.l"
{ CommentUpdate(yylval,STR(float)   ,yylineno); return BUILTIN; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 199 "tokenizer.l"
{ CommentUpdate(yylval,STR(double)  ,yylineno); return BUILTIN; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 200 "tokenizer.l"
{ CommentUpdate(yylval,STR(char)    ,yylineno); return BUILTIN; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 201 "tokenizer.l"
{ CommentUpdate(yylval,STR(bool)    ,yylineno); return BUILTIN; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 202 "tokenizer.l"
{ CommentUpdate(yylval,STR(void)    ,yylineno); return BUILTIN; }
	YY_BREAK
/*==============> Identifiers <==============*/
case 88:
YY_RULE_SETUP
#line 205 "tokenizer.l"
{ CommentUpdate(yylval,yytext,yylineno);
                        return IDENTIFIER; 
                      }
	YY_BREAK
/*==============> Numbers <==============*/
case 89:
YY_RULE_SETUP
#line 211 "tokenizer.l"
{ yylval = StringC(yytext); return CONSTANT; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 212 "tokenizer.l"
{ yylval = StringC(yytext); return CONSTANT; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 213 "tokenizer.l"
{ yylval = StringC(yytext); return CONSTANT; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 214 "tokenizer.l"
{ yylval = StringC(yytext); return CONSTANT; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 216 "tokenizer.l"
{ yylval = StringC(yytext); return CONSTANT; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 217 "tokenizer.l"
{ yylval = StringC(yytext); return STRING;   }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 218 "tokenizer.l"
{ return ELLIPSIS; }
	YY_BREAK
/*==============> Strip // comments <==============*/
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 222 "tokenizer.l"
{ CommentUpdate(yylval,&yytext[4],yylineno); 
				 return DOCSECTION; 
                               }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 225 "tokenizer.l"
{ StringC txt(&(yytext[3]));
                                txt.gsub("\n"," ");
                                if(!comment.Text().IsEmpty()) {
                                  comment.Text() = StringC();
                                  comment.Header() = StringC();
                                }
				if(comment.StartLine() < 0)
				  comment.SetStartLine(yylineno-1);
                                comment.Header() += txt;
				comment.SetEndLine(yylineno-1);
                              }
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 236 "tokenizer.l"
{ StringC txt(&(yytext[3]));
                                if(txt.length() > 0) {
				  if(comment.StartLine() < 0)
				    comment.SetStartLine(yylineno-1);
                                  comment.SetEndLine(yylineno-1);
                                  switch(txt.firstchar()) {
                                  case ' ': {
                                    int at = txt.index('=');
                                    if(at < 0)
                                      break;
                                    StringC varNm = txt.before(at).TopAndTail();
                                    StringC value = txt.after(at).TopAndTail();
                                    value.gsub("\"","");// Now get rid of quotes.
                                    comment.SetVar(varNm,value);
                                    //cout << "Setting var '" << varNm << "' to '" << value << "'\n"; 
                                    break;
                                    }
                                  default: {
                                    int atc = txt.index(':');
                                    if(atc < 0) {
                                      // Error message ?
                                      break;
                                    }
                                    StringC lvarname = txt.before(atc).TopAndTail();
                                    comment.Locals()[lvarname] += txt.after(atc);
                                    //cout << "Setting local var '" << lvarname << "' to '" << comment.Locals()[lvarname] << "'\n"; 
                                    break ;
                                    }
                                  }
                                }
                              }
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 267 "tokenizer.l"
{ comment.Text() += &yytext[2]; 
				if(comment.StartLine() < 0)
				  comment.SetStartLine(yylineno-1);
                                comment.SetEndLine(yylineno-1);
			      }
	YY_BREAK
/*==============> Skip preprocessor directives <==============*/
case 100:
YY_RULE_SETUP
#line 274 "tokenizer.l"
{ BEGIN (PREPARSER); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 275 "tokenizer.l"
{ BEGIN (PPCOMMENT); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 276 "tokenizer.l"
{ BEGIN (PREPARSER); }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 277 "tokenizer.l"
{}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 278 "tokenizer.l"
{}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 279 "tokenizer.l"
{ BEGIN (INITIAL); }
	YY_BREAK
/*==============> Strip comments <==============*/
case 106:
YY_RULE_SETUP
#line 283 "tokenizer.l"
{ BEGIN (COMMENT);}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 284 "tokenizer.l"
{ BEGIN (INITIAL); }
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 286 "tokenizer.l"
{}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 287 "tokenizer.l"
{}
	YY_BREAK
/*==============> All other characters are ignored <==============*/
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 290 "tokenizer.l"
{}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 291 "tokenizer.l"
{}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 293 "tokenizer.l"
ECHO;
	YY_BREAK
#line 1881 "tokenizer.yy.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(PREPARSER):
case YY_STATE_EOF(PPCOMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 360 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 360 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 359);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 293 "tokenizer.l"



