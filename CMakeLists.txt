
cmake_minimum_required(VERSION 3.15)
project(RavlX)

set(CMAKE_LEGACY_CYGWIN_WIN32 0)
set(CMAKE_CXX_STANDARD 17)

# The folowing can be used to avoid building binaries when they are not needed.
set(EXCLUDE_APPLICATIONS EXCLUDE_FROM_ALL)
set(EXCLUDE_EXAMPLES EXCLUDE_FROM_ALL)
#set(EXCLUDE_UNITTESTS EXCLUDE_FROM_ALL)


set(CMAKE_INSTALL_PREFIX "/opt/ReactAI")
set(BUILD_ROOT_AUXFILE "../..")

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")

message(" PrefixPath: ${CMAKE_PREFIX_PATH}")
message(" ModulePath: ${CMAKE_MODULE_PATH}")

add_definitions(-DPROJECT_OUT="${CMAKE_BINARY_DIR}/src")
add_definitions(-DDEFAULT_ROOT="${CMAKE_BINARY_DIR}/src")
add_definitions(-DMUSTLINK_JPEG -DMUSTLINK_TIFF -DMUSTLINK_PNG)

set(RAVLX_VERSION 0.1)

find_package(Threads REQUIRED)
find_package(JPEG REQUIRED)
find_package(PNG REQUIRED)
find_package(TIFF REQUIRED)

set(OpenGL_GL_PREFERENCE GLVND)

include (FindPkgConfig)

# This is used if a seperate library is required for tcp/ip sockets, largely legacy I suspect
set(SOCKET_FOUND 1)



#
# JSONC



if(TRUE)
message(STATUS "ExtImageLIBS found LIBS:${PNG_LIBRARIES} ${JPEG_LIBRARIES} ${TIFF_LIBRARIES} ")
else()
message(STATUS "ExtImageLIBS not found")
endif()


if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
message(STATUS "MacOSX found LIBS:")
else()
message(STATUS "MacOSX not found")
endif()


if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
message(STATUS "Linux found LIBS:")
else()
message(STATUS "Linux not found")
endif()


if(${CMAKE_SYSTEM_NAME} MATCHES "Linux32")
message(STATUS "linux found LIBS:")
else()
message(STATUS "linux not found")
endif()


if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
message(STATUS "linux64 found LIBS:")
else()
message(STATUS "linux64 not found")
endif()


if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin32")
message(STATUS "macosx32 found LIBS:")
else()
message(STATUS "macosx32 not found")
endif()


if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
message(STATUS "macosx64 found LIBS:")
else()
message(STATUS "macosx64 not found")
endif()


if(${CMAKE_SYSTEM_NAME} MATCHES "Freebsd")
message(STATUS "freebsd_x86 found LIBS:")
else()
message(STATUS "freebsd_x86 not found")
endif()


if(${CMAKE_SYSTEM_NAME} MATCHES "Solaris")
message(STATUS "sol2 found LIBS:")
else()
message(STATUS "sol2 not found")
endif()


if(${CMAKE_SYSTEM_NAME} MATCHES "Solaris2_7")
message(STATUS "sol2_7 found LIBS:")
else()
message(STATUS "sol2_7 not found")
endif()


if(${CMAKE_SYSTEM_NAME} MATCHES "SGI")
message(STATUS "sgi found LIBS:")
else()
message(STATUS "sgi not found")
endif()


if(${CMAKE_SYSTEM_NAME} MATCHES "alpha")
message(STATUS "alpha found LIBS:")
else()
message(STATUS "alpha not found")
endif()


if(NOT ${CMAKE_CXX_COMPILER_ID} MATCHES "MSVC")
message(STATUS "!VCPP found LIBS:")
else()
message(STATUS "!VCPP not found")
endif()


if(${CMAKE_CXX_COMPILER_ID} MATCHES "MSVC")
message(STATUS "VCPP found LIBS:")
else()
message(STATUS "VCPP not found")
endif()


if(NOT ${CMAKE_SYSTEM_PROCESSOR} MATCHES "arm")
message(STATUS "!arm found LIBS:")
else()
message(STATUS "!arm not found")
endif()


if(${CMAKE_SYSTEM_PROCESSOR} MATCHES "arm")
message(STATUS "arm found LIBS:")
else()
message(STATUS "arm not found")
endif()


if(${CMAKE_SYSTEM_NAME} STREQUAL "CYGWIN")
message(STATUS "cygwin found LIBS:")
else()
message(STATUS "cygwin not found")
endif()


if(NOT ${CMAKE_SYSTEM_NAME} STREQUAL "CYGWIN")
message(STATUS "!cygwin found LIBS:")
else()
message(STATUS "!cygwin not found")
endif()


if(TRUE)
message(STATUS "DynLink found LIBS:dl")
else()
message(STATUS "DynLink not found")
endif()


if(Threads_FOUND)
message(STATUS "posixThreads found LIBS:${CMAKE_THREAD_LIBS_INIT}")
else()
message(STATUS "posixThreads not found")
endif()

pkg_check_modules(gthread QUIET gthread-2.0)
if(gthread_FOUND)
message(STATUS "gthread found LIBS:${gthread_LIBRARIES}")
if(NOT "${gthread_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${gthread_INCLUDE_DIRS}")
include_directories(${gthread_INCLUDE_DIRS})
endif()
if(NOT "${gthread_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${gthread_LIBRARY_DIRS}")
link_directories(${gthread_LIBRARY_DIRS})
endif()
else()
message(STATUS "gthread not found")
endif()

find_package(ZLIB QUIET)
if(ZLIB_FOUND)
message(STATUS "Zlib found LIBS:${ZLIB_LIBRARIES}")
if(NOT "${ZLIB_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${ZLIB_INCLUDE_DIRS}")
include_directories(${ZLIB_INCLUDE_DIRS})
endif()
if(NOT "${ZLIB_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${ZLIB_LIBRARY_DIRS}")
link_directories(${ZLIB_LIBRARY_DIRS})
endif()
else()
message(STATUS "Zlib not found")
endif()

find_package(LAPACK QUIET)
if(LAPACK_FOUND)
message(STATUS "LAPACK found LIBS:${LAPACK_LIBRARIES}")
if(NOT "${LAPACK_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${LAPACK_INCLUDE_DIRS}")
include_directories(${LAPACK_INCLUDE_DIRS})
endif()
if(NOT "${LAPACK_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${LAPACK_LIBRARY_DIRS}")
link_directories(${LAPACK_LIBRARY_DIRS})
endif()
else()
message(STATUS "LAPACK not found")
endif()

find_package(X11 QUIET)
if(X11_FOUND)
message(STATUS "X11 found LIBS:${X11_LIBRARIES}")
if(NOT "${X11_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${X11_INCLUDE_DIRS}")
include_directories(${X11_INCLUDE_DIRS})
endif()
if(NOT "${X11_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${X11_LIBRARY_DIRS}")
link_directories(${X11_LIBRARY_DIRS})
endif()
else()
message(STATUS "X11 not found")
endif()

find_package(CURL QUIET)
if(CURL_FOUND)
message(STATUS "libCurl found LIBS:${CURL_LIBRARIES}")
if(NOT "${CURL_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${CURL_INCLUDE_DIRS}")
include_directories(${CURL_INCLUDE_DIRS})
endif()
if(NOT "${CURL_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${CURL_LIBRARY_DIRS}")
link_directories(${CURL_LIBRARY_DIRS})
endif()
else()
message(STATUS "libCurl not found")
endif()

find_package(GTK2 QUIET)
if(GTK2_FOUND)
message(STATUS "libGTK2 found LIBS:${GTK2_LIBRARIES}")
if(NOT "${GTK2_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${GTK2_INCLUDE_DIRS}")
include_directories(${GTK2_INCLUDE_DIRS})
endif()
if(NOT "${GTK2_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${GTK2_LIBRARY_DIRS}")
link_directories(${GTK2_LIBRARY_DIRS})
endif()
else()
message(STATUS "libGTK2 not found")
endif()

pkg_check_modules(libzmq QUIET libzmq)
if(libzmq_FOUND)
message(STATUS "ZeroMQ found LIBS:${libzmq_LIBRARIES}")
if(NOT "${libzmq_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${libzmq_INCLUDE_DIRS}")
include_directories(${libzmq_INCLUDE_DIRS})
endif()
if(NOT "${libzmq_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${libzmq_LIBRARY_DIRS}")
link_directories(${libzmq_LIBRARY_DIRS})
endif()
else()
message(STATUS "ZeroMQ not found")
endif()

pkg_check_modules(librlog QUIET librlog)
if(librlog_FOUND)
message(STATUS "RLog found LIBS:${librlog_LIBRARIES}")
if(NOT "${librlog_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${librlog_INCLUDE_DIRS}")
include_directories(${librlog_INCLUDE_DIRS})
endif()
if(NOT "${librlog_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${librlog_LIBRARY_DIRS}")
link_directories(${librlog_LIBRARY_DIRS})
endif()
else()
message(STATUS "RLog not found")
endif()

pkg_check_modules(OPENSCENEGRAPH QUIET osgDB osgFX osgGA osgParticle osgSim osgText osgUtil osgTerrain osgManipulator osgViewer osgWidget osgShadow osgAnimation osgVolume)
if(OPENSCENEGRAPH_FOUND)
message(STATUS "OpenSceneGraph found LIBS:${OPENSCENEGRAPH_LIBRARIES}")
if(NOT "${OPENSCENEGRAPH_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${OPENSCENEGRAPH_INCLUDE_DIRS}")
include_directories(${OPENSCENEGRAPH_INCLUDE_DIRS})
endif()
if(NOT "${OPENSCENEGRAPH_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${OPENSCENEGRAPH_LIBRARY_DIRS}")
link_directories(${OPENSCENEGRAPH_LIBRARY_DIRS})
endif()
else()
message(STATUS "OpenSceneGraph not found")
endif()

pkg_check_modules(OPENSCENEGRAPHGTK QUIET OPENSCENEGRAPHGTK)
if(OPENSCENEGRAPHGTK_FOUND)
message(STATUS "OpenSceneGraphGTK found LIBS:${OPENSCENEGRAPHGTK_LIBRARIES}")
if(NOT "${OPENSCENEGRAPHGTK_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${OPENSCENEGRAPHGTK_INCLUDE_DIRS}")
include_directories(${OPENSCENEGRAPHGTK_INCLUDE_DIRS})
endif()
if(NOT "${OPENSCENEGRAPHGTK_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${OPENSCENEGRAPHGTK_LIBRARY_DIRS}")
link_directories(${OPENSCENEGRAPHGTK_LIBRARY_DIRS})
endif()
else()
message(STATUS "OpenSceneGraphGTK not found")
endif()

pkg_check_modules(opencv QUIET opencv)
if(opencv_FOUND)
message(STATUS "OpenCV found LIBS:${opencv_LIBRARIES}")
if(NOT "${opencv_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${opencv_INCLUDE_DIRS}")
include_directories(${opencv_INCLUDE_DIRS})
endif()
if(NOT "${opencv_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${opencv_LIBRARY_DIRS}")
link_directories(${opencv_LIBRARY_DIRS})
endif()
else()
message(STATUS "OpenCV not found")
endif()

pkg_check_modules(loudmouth QUIET loudmouth-1.0)
if(loudmouth_FOUND)
message(STATUS "Loudmouth found LIBS:${loudmouth_LIBRARIES}")
if(NOT "${loudmouth_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${loudmouth_INCLUDE_DIRS}")
include_directories(${loudmouth_INCLUDE_DIRS})
endif()
if(NOT "${loudmouth_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${loudmouth_LIBRARY_DIRS}")
link_directories(${loudmouth_LIBRARY_DIRS})
endif()
else()
message(STATUS "Loudmouth not found")
endif()

pkg_check_modules(iksemel QUIET iksemel)
if(iksemel_FOUND)
message(STATUS "iksemel found LIBS:${iksemel_LIBRARIES}")
if(NOT "${iksemel_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${iksemel_INCLUDE_DIRS}")
include_directories(${iksemel_INCLUDE_DIRS})
endif()
if(NOT "${iksemel_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${iksemel_LIBRARY_DIRS}")
link_directories(${iksemel_LIBRARY_DIRS})
endif()
else()
message(STATUS "iksemel not found")
endif()

pkg_check_modules(libdv QUIET libdv)
if(libdv_FOUND)
message(STATUS "libDV found LIBS:${libdv_LIBRARIES}")
if(NOT "${libdv_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${libdv_INCLUDE_DIRS}")
include_directories(${libdv_INCLUDE_DIRS})
endif()
if(NOT "${libdv_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${libdv_LIBRARY_DIRS}")
link_directories(${libdv_LIBRARY_DIRS})
endif()
else()
message(STATUS "libDV not found")
endif()

pkg_check_modules(python QUIET python)
if(python_FOUND)
message(STATUS "LibPython found LIBS:${python_LIBRARIES}")
if(NOT "${python_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${python_INCLUDE_DIRS}")
include_directories(${python_INCLUDE_DIRS})
endif()
if(NOT "${python_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${python_LIBRARY_DIRS}")
link_directories(${python_LIBRARY_DIRS})
endif()
else()
message(STATUS "LibPython not found")
endif()

pkg_check_modules(libpulse-simple QUIET libpulse-simple)
if(DEFINED libpulse-simple_FOUND)
message(STATUS "PulseAudioSimple found LIBS:${libpulse-simple_LIBRARIES}")
if(NOT "${libpulse-simple_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${libpulse-simple_INCLUDE_DIRS}")
include_directories(${libpulse-simple_INCLUDE_DIRS})
endif()
if(NOT "${libpulse-simple_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${libpulse-simple_LIBRARY_DIRS}")
link_directories(${libpulse-simple_LIBRARY_DIRS})
endif()
else()
message(STATUS "PulseAudioSimple not found")
endif()

pkg_check_modules(libgd QUIET libgd)
if(libgd_FOUND)
message(STATUS "LibGd found LIBS:${libgd_LIBRARIES}")
if(NOT "${libgd_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${libgd_INCLUDE_DIRS}")
include_directories(${libgd_INCLUDE_DIRS})
endif()
if(NOT "${libgd_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${libgd_LIBRARY_DIRS}")
link_directories(${libgd_LIBRARY_DIRS})
endif()
else()
message(STATUS "LibGd not found")
endif()

pkg_check_modules(libgnome QUIET libgnome-2.0)
if(libgnome_FOUND)
message(STATUS "LibGnome found LIBS:${libgnome_LIBRARIES}")
if(NOT "${libgnome_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${libgnome_INCLUDE_DIRS}")
include_directories(${libgnome_INCLUDE_DIRS})
endif()
if(NOT "${libgnome_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${libgnome_LIBRARY_DIRS}")
link_directories(${libgnome_LIBRARY_DIRS})
endif()
else()
message(STATUS "LibGnome not found")
endif()


if(libjasper_FOUND)
message(STATUS "LibJasper found LIBS:${libjasper_LIBRARIES}")
if(NOT "${libjasper_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${libjasper_INCLUDE_DIRS}")
include_directories(${libjasper_INCLUDE_DIRS})
endif()
if(NOT "${libjasper_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${libjasper_LIBRARY_DIRS}")
link_directories(${libjasper_LIBRARY_DIRS})
endif()
else()
message(STATUS "LibJasper not found")
endif()

pkg_check_modules(portaudio QUIET portaudio-2.0)
if(portaudio_FOUND)
message(STATUS "PortAudio found LIBS:${portaudio_LIBRARIES}")
if(NOT "${portaudio_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${portaudio_INCLUDE_DIRS}")
include_directories(${portaudio_INCLUDE_DIRS})
endif()
if(NOT "${portaudio_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${portaudio_LIBRARY_DIRS}")
link_directories(${portaudio_LIBRARY_DIRS})
endif()
else()
message(STATUS "PortAudio not found")
endif()

pkg_check_modules(libdc1394 QUIET libdc1394-1)
if(libdc1394_FOUND)
message(STATUS "libdc1394 found LIBS:${libdc1394_LIBRARIES}")
if(NOT "${libdc1394_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${libdc1394_INCLUDE_DIRS}")
include_directories(${libdc1394_INCLUDE_DIRS})
endif()
if(NOT "${libdc1394_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${libdc1394_LIBRARY_DIRS}")
link_directories(${libdc1394_LIBRARY_DIRS})
endif()
else()
message(STATUS "libdc1394 not found")
endif()

pkg_check_modules(audiofile QUIET audiofile)
if(audiofile_FOUND)
message(STATUS "libAudioFile found LIBS:${audiofile_LIBRARIES}")
if(NOT "${audiofile_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${audiofile_INCLUDE_DIRS}")
include_directories(${audiofile_INCLUDE_DIRS})
endif()
if(NOT "${audiofile_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${audiofile_LIBRARY_DIRS}")
link_directories(${audiofile_LIBRARY_DIRS})
endif()
else()
message(STATUS "libAudioFile not found")
endif()

pkg_check_modules(libmpeg2 QUIET libmpeg2)
if(libmpeg2_FOUND)
message(STATUS "libmpeg2 found LIBS:${libmpeg2_LIBRARIES}")
if(NOT "${libmpeg2_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${libmpeg2_INCLUDE_DIRS}")
include_directories(${libmpeg2_INCLUDE_DIRS})
endif()
if(NOT "${libmpeg2_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${libmpeg2_LIBRARY_DIRS}")
link_directories(${libmpeg2_LIBRARY_DIRS})
endif()
else()
message(STATUS "libmpeg2 not found")
endif()


if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
message(STATUS "devVideo4Linux2 found LIBS:")
else()
message(STATUS "devVideo4Linux2 not found")
endif()


if(FALSE)
message(STATUS "devVideo4Linux found LIBS:")
else()
message(STATUS "devVideo4Linux not found")
endif()


if(SGI)
message(STATUS "SGIVL found LIBS:")
else()
message(STATUS "SGIVL not found")
endif()

pkg_check_modules(dvdread QUIET dvdread-X)
if(dvdread_FOUND)
message(STATUS "dvdread found LIBS:${dvdread_LIBRARIES}")
if(NOT "${dvdread_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${dvdread_INCLUDE_DIRS}")
include_directories(${dvdread_INCLUDE_DIRS})
endif()
if(NOT "${dvdread_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${dvdread_LIBRARY_DIRS}")
link_directories(${dvdread_LIBRARY_DIRS})
endif()
else()
message(STATUS "dvdread not found")
endif()


if(DEFINED libClipStationPro_FOUND)
message(STATUS "libClipStationPro found LIBS:${libClipStationPro_LIBRARIES}")
if(NOT "${libClipStationPro_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${libClipStationPro_INCLUDE_DIRS}")
include_directories(${libClipStationPro_INCLUDE_DIRS})
endif()
if(NOT "${libClipStationPro_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${libClipStationPro_LIBRARY_DIRS}")
link_directories(${libClipStationPro_LIBRARY_DIRS})
endif()
else()
message(STATUS "libClipStationPro not found")
endif()


if(libmcrypt_FOUND)
message(STATUS "libmcrypt found LIBS:${libmcrypt_LIBRARIES}")
if(NOT "${libmcrypt_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${libmcrypt_INCLUDE_DIRS}")
include_directories(${libmcrypt_INCLUDE_DIRS})
endif()
if(NOT "${libmcrypt_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${libmcrypt_LIBRARY_DIRS}")
link_directories(${libmcrypt_LIBRARY_DIRS})
endif()
else()
message(STATUS "libmcrypt not found")
endif()

find_package(OpenGL)
if(OPENGL_FOUND)
message(STATUS "libGL found LIBS:${OPENGL_LIBRARIES}")
if(NOT "${OPENGL_INCLUDE_DIR}" STREQUAL "")
message(STATUS " Include : ${OPENGL_INCLUDE_DIR}")
include_directories(${OPENGL_INCLUDE_DIR})
endif()
else()
message(STATUS "libGL not found")
endif()


if(SOCKET_FOUND)
message(STATUS "Socket found LIBS:${SOCKET_LIBRARIES}")
else()
message(STATUS "Socket not found")
endif()

pkg_check_modules(libglade QUIET libglade-2.0)
if(libglade_FOUND)
message(STATUS "libglade2 found LIBS:${libglade_LIBRARIES}")
if(NOT "${libglade_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${libglade_INCLUDE_DIRS}")
include_directories(${libglade_INCLUDE_DIRS})
endif()
if(NOT "${libglade_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${libglade_LIBRARY_DIRS}")
link_directories(${libglade_LIBRARY_DIRS})
endif()
else()
message(STATUS "libglade2 not found")
endif()

pkg_check_modules(gtkglext QUIET gtkglext-1.0)
if(gtkglext_FOUND)
message(STATUS "gtkglext found LIBS:${gtkglext_LIBRARIES}")
if(NOT "${gtkglext_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${gtkglext_INCLUDE_DIRS}")
include_directories(${gtkglext_INCLUDE_DIRS})
endif()
if(NOT "${gtkglext_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${gtkglext_LIBRARY_DIRS}")
link_directories(${gtkglext_LIBRARY_DIRS})
endif()
else()
message(STATUS "gtkglext not found")
endif()


if(MKL_FOUND)
message(STATUS "libmkl found LIBS:${MKL_LIBRARIES}")
if(NOT "${MKL_INCLUDE_DIRS}" STREQUAL "")
message(STATUS " Include : ${MKL_INCLUDE_DIRS}")
include_directories(${MKL_INCLUDE_DIRS})
endif()
if(NOT "${MKL_LIBRARY_DIRS}" STREQUAL "")
message(STATUS " Library : ${MKL_LIBRARY_DIRS}")
link_directories(${MKL_LIBRARY_DIRS})
endif()
else()
message(STATUS "libmkl not found")
endif()


if(gtkglext_FOUND)
add_definitions(-DRAVL_USE_GTKGLEXT=1)
endif()

enable_testing()

add_subdirectory(src/Core)
add_subdirectory(src/OS)
add_subdirectory(src/CCMath)
add_subdirectory(src/Math)
add_subdirectory(src/Plot)
add_subdirectory(src/PatternRec)
add_subdirectory(src/Audio)
add_subdirectory(src/Image)
add_subdirectory(src/3D)
add_subdirectory(src/Logic)
add_subdirectory(src/SourceTools)
add_subdirectory(src/GUI)
add_subdirectory(src/CompVision)
add_subdirectory(src/Contrib)
add_subdirectory(src/Applications)


